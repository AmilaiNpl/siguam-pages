{"version":3,"sources":["views/forms/teacher/notas.js","views/forms/teacher/Card.js"],"names":["docente","currentUser","ListaCadeiras","props","useState","cadeiras","setCadeiras","dataTesteCadeira","setDataTesteCadeira","exame","updateDom","setUpdateDom","carregando","setCarregando","a","requesicoes","getUsuarioLogado","sub","usuario","getDocenteByNumero","data","numero","init","Promise","all","getTurmasProfessor","id","getCalendario","listaCadeiras","listaCalendario","useEffect","authService","getCurrentUser","usuarioLagado","setTimeout","style","maxWidth","margin","display","justifyContent","alignItems","width","marginTop","color","length","map","cadeira","url","location","pathname","severity","tipoAvaliacoes","Card","objecto","isDialogOpen","setIsDialogOpen","React","openPais","setOpenPais","handleDialogOpen","event","preventDefault","handleDialogClose","getTipoAvaliacoes","getAvaliacoes","getTurmaCadeirabyCadeiraAndTurma","turma","requestTipoAvaliacao","avaliacoesRequest","turmaCadeira","validationSchema","Yup","shape","qtdtrabalho","min","required","qtdTeste","tipoAvaliacoesFiltradoTeste","filter","opt","tipoAvaliacoesFiltradoTrab","className","nome","curso","semestre","codigo","item","avaliacaoTesteOrdem1","avaliacao","ordem","find","dataRealizacao","Date","novaData","addDays","dataFormatada","format","locale","ptBR","avaliacaoString","onClick","to","btoa","open","onClose","aria-labelledby","initialValues","onSubmit","values","setSubmitting","resolve","postAvalicoes","Swal","fire","response","status","icon","title","text","message","footer","touched","errors","isSubmitting","handleChange","handleBlur","handleSubmit","container","spacing","xs","sm","type","variant","name","error","teste","helperText","onChange","select","value","fullWidth","label","onBlur","trabalho","disabled"],"mappings":"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","file":"static/js/14.06ddd1ac.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { requesicoes } from '../../../utils/services';\r\nimport Card from './Card';\r\nimport { Alert } from '@mui/material';\r\nimport authService from '../../../utils/services/auth';\r\nimport { MoonLoader } from 'react-spinners';\r\n\r\nlet docente = []\r\nlet currentUser = null\r\n\r\nexport default function ListaCadeiras(props) {\r\n\r\n  const [cadeiras, setCadeiras] = useState([]);\r\n  const [dataTesteCadeira, setDataTesteCadeira] = useState([]);\r\n\r\n  const [exame, setExame] = useState(false);\r\n  const [updateDom, setUpdateDom] = useState(false);\r\n  const [carregando, setCarregando] = useState(true);\r\n\r\n  useEffect(() => {\r\n    currentUser = authService.getCurrentUser();\r\n    usuarioLagado();\r\n\r\n    setTimeout(() => {\r\n      setCarregando(false);\r\n    }, 5000);\r\n\r\n  }, [])\r\n\r\n  async function usuarioLagado() {\r\n    setCarregando(true);\r\n\r\n    const usuario = await requesicoes().getUsuarioLogado(currentUser.sub, '?campos=id,numero')\r\n    docente = await requesicoes().getDocenteByNumero(usuario.data.numero, '?campos=id,numero')\r\n    init();\r\n\r\n    setCarregando(false);\r\n    setUpdateDom(!updateDom);\r\n  }\r\n\r\n  async function init() {\r\n\r\n    const [listaCadeiras, listaCalendario] = await Promise.all([(requesicoes().getTurmasProfessor(`/${docente.data.id}?campos=id,semestre,turma,anoLectivo,cadeira.id,cadeira.codigo,cadeira.nome,curso,docente.id,docente.nome,docente.apelido`)), requesicoes().getCalendario(`?campos=id,avaliacao,ordem,cadeiras.id,cadeiras.nome,dataRealizacao`)])\r\n    setDataTesteCadeira(listaCalendario.data)\r\n    setCadeiras(listaCadeiras.data);\r\n    setUpdateDom(!updateDom);\r\n\r\n  }\r\n\r\n  return (\r\n    <div style={{ maxWidth: 800, margin: '30px auto', }}>\r\n      {carregando ? (\r\n        <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', width: '100%', marginTop: '20%' }}>\r\n          <MoonLoader color=\"#36d7b7\" />\r\n        </div>\r\n\r\n      ) : (\r\n        <div>\r\n          {cadeiras.length > 0 ? (\r\n            cadeiras.map(cadeira => (\r\n              <Card cadeira={cadeira} data={dataTesteCadeira} key={cadeira.id} exame={exame} url={props.location.pathname} />\r\n            ))\r\n          ) : (\r\n            <Alert severity=\"warning\">Não possui turmas no momento. Porfavor contacte o seu Departamento</Alert>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport {\r\n  NavLink\r\n} from \"react-router-dom\";\r\nimport './card.css';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport * as Yup from 'yup'\r\nimport { Formik, Form } from 'formik'\r\nimport { Button, DialogActions, DialogContent, DialogContentText, DialogTitle, Grid, MenuItem, TextField } from '@mui/material';\r\nimport Swal from 'sweetalert2';\r\nimport { requesicoes } from '../../../utils/services';\r\nimport { addDays, format } from 'date-fns';\r\nimport { ptBR } from 'date-fns/locale';\r\n\r\nlet tipoAvaliacoes = []\r\nlet turma = [];\r\nlet avaliacoes = []\r\nconst Card = ({ cadeira, data, exame, url }) => {\r\n\r\n  const objecto = cadeira\r\n  // console.log(JSON.stringify(objecto.turma.id), 'Turma-id');\r\n  // console.log(JSON.stringify(data), 'data');\r\n\r\n\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [openPais, setOpenPais] = React.useState(false);\r\n  const [updateDom, setUpdateDom] = useState(false);\r\n\r\n\r\n\r\n  const handleDialogOpen = (event) => {\r\n    event.preventDefault();\r\n    setOpenPais(true);\r\n    setIsDialogOpen(true)\r\n  };\r\n\r\n  const handleDialogClose = () => {\r\n    setIsDialogOpen(false);\r\n  };\r\n\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    init();\r\n  }, [])\r\n\r\n  async function init() {\r\n    const [requestTipoAvaliacao, avaliacoesRequest, turmaCadeira] = await Promise.all([requesicoes().getTipoAvaliacoes(), requesicoes().getAvaliacoes(), requesicoes().getTurmaCadeirabyCadeiraAndTurma(`/${objecto.cadeira.id}/${objecto.turma.id}?campos=id,anoLectivo,turma,cadeira`)]);\r\n    tipoAvaliacoes = requestTipoAvaliacao.data\r\n    avaliacoes = avaliacoesRequest.data;\r\n    // console.log('avaliacoes', avaliacoes);\r\n    turma = turmaCadeira.data\r\n    // console.log('turma ',turma);\r\n    setUpdateDom(!updateDom);\r\n  }\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    qtdtrabalho: Yup.number().min(1, 'O número mínimo de avalicoes é de 1').required(\"Campo Obrigatorio\"),\r\n    qtdTeste: Yup.number().min(2, \"O número mínimo de avalicoes é de 2\").required(\"Campo Obrigatorio\"),\r\n  })\r\n\r\n  const tipoAvaliacoesFiltradoTeste = tipoAvaliacoes.filter(opt => opt !== \"Exame\" && opt !== \"Rec\" && opt !== \"Trab\");\r\n  const tipoAvaliacoesFiltradoTrab = tipoAvaliacoes.filter(opt => opt !== \"Exame\" && opt !== \"Rec\" && opt !== \"Teste\");\r\n\r\n\r\n  return (\r\n\r\n    <div className=\"cadeira-card\" key={objecto.id}>\r\n      <div className=\"cadeira-card__info\">\r\n        <div className=\"cadeira-card__titulo\" ><span className=\"cadeira-card__codigo\"> Cadeira:</span> {objecto.cadeira.nome} <span className=\"cadeira-card__codigo\"> Curso: {objecto.curso.nome} </span> <span className=\"title_turma\">Turma:<span className=\"turma\">{objecto.turma.turma}</span></span> </div><br />\r\n        <footer className=\"cadeira-card__semestre\"><span >Semestre:  <span className=\"cadeira-card__titulo\"> {objecto.semestre}</span></span></footer>\r\n        <span className=\"cadeira-card__codigo\" >Codigo:</span> <span className=\"cadeira-card__titulo\">{objecto.cadeira.codigo}</span>\r\n        <footer className=\"cadeira-card__footer\">\r\n          {/* Aqui deve ver se eh ultimo dia de lancamneto de Ordem */}\r\n          {data.map((item) => {\r\n            const avaliacaoTesteOrdem1 = item.avaliacao === \"Teste\" && item.ordem === 1;\r\n            // console.log('avaliacaoTesteOrdem1 ', avaliacaoTesteOrdem1);\r\n            const cadeiraEncontrada = item.cadeiras.find(cadeira => cadeira.id === objecto.cadeira.id);\r\n            // console.log('cadeiraEncontrada ', cadeiraEncontrada);\r\n            if (cadeiraEncontrada && avaliacaoTesteOrdem1) {\r\n              const dataRealizacao = new Date(item.dataRealizacao);\r\n              const novaData = addDays(dataRealizacao, 7);\r\n              const dataFormatada = format(novaData, 'd MMMM yyyy', { locale: ptBR });\r\n              const avaliacaoString = `Último dia de Lançamento das notas  ${item.ordem === 1 ? ' das Primeiras Avaliações' : item.ordem === 2 ? ' das Segundas Avaliações ' : item.avaliacao === 'Exame' ? 'do Exame Normal' : ' de Recorrência'}  `;\r\n              // console.log('dataFormatada ', dataFormatada);\r\n              return (\r\n                <div key={item.id}>\r\n                  <div>{avaliacaoString}</div>\r\n                  <div>{dataFormatada}</div>\r\n                </div>\r\n              );\r\n            }\r\n\r\n            return null;\r\n          })}\r\n\r\n          <div className=\"cadeira-card__comments-count\">\r\n\r\n          </div>\r\n          {\r\n            url == '/teacher/notas/pauta' ?\r\n              <Button className=\"cadeira-card__pauta\" onClick={handleDialogOpen} style={{ display: exame ? 'none' : 'block' }}>\r\n                Imprimir Pauta\r\n              </Button>\r\n              :\r\n              <Button className=\"cadeira-card__pauta\" onClick={handleDialogOpen} style={{ display: exame ? 'none' : 'block' }}>\r\n                Difinir Avaliações\r\n              </Button>\r\n          }\r\n\r\n          {url == '/teacher/notas/pauta' ? <NavLink className=\"cadeira-card__pauta\" to={`/teacher/pauta?cadeira=${btoa(objecto.cadeira.id)}&curso=${btoa(objecto.curso.id)}&turma=${btoa(objecto.turma.id)}`}>\r\n            Ver a Pauta\r\n          </NavLink>\r\n            :\r\n            (exame ? (\r\n              <NavLink className=\"cadeira-card__pauta\" to={`/teacher/notasExame?cadeira=${btoa(objecto.cadeira.id)}&curso=${btoa(objecto.curso.id)}&turma=${btoa(objecto.turma.id)}`}>\r\n                Lançar Notas de Exame\r\n              </NavLink>\r\n            ) : (\r\n\r\n              <NavLink className=\"cadeira-card__pauta\" to={`/pauta/pautaCadeira?cadeira=${btoa(objecto.cadeira.id)}&curso=${btoa(objecto.curso.id)}&turma=${btoa(objecto.turma.id)}`}>\r\n                Lançar Notas\r\n              </NavLink>\r\n            ))}\r\n        </footer>\r\n      </div>\r\n\r\n      {isDialogOpen && (\r\n\r\n        <Dialog open={openPais} onClose={handleDialogClose} aria-labelledby=\"form-dialog-title\">\r\n          <DialogTitle id=\"form-dialog-title\">Tipo da Avaliação</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText>\r\n              Por favor, defina o tipo de avaliação e a quantidade de avaliações\r\n            </DialogContentText>\r\n            <Formik\r\n              initialValues={{}}\r\n              validationSchema={validationSchema}\r\n              onSubmit={async (values, { setSubmitting }) => {\r\n                try {\r\n\r\n                  values.cadeira = objecto.cadeira\r\n                  values.turma = objecto.turma\r\n                  await Promise.resolve(requesicoes().postAvalicoes([values]));\r\n                  Swal.fire('Êxito!', 'Avaliação cadastrada com sucesso!', 'success');\r\n                  handleDialogClose()\r\n                  init();\r\n                } catch (error) {\r\n                  if (error.response.status >= 500) {\r\n                    // console.log('=====Entrou aqui: ', error.response.status);\r\n\r\n                    Swal.fire({\r\n                      icon: 'error',\r\n                      title: 'Erro',\r\n                      text: error.response.data.message,\r\n                      footer: 'Se o erro persistir, por favor, entre em contacto com o Centro Informático',\r\n                    });\r\n                    handleDialogClose()\r\n                  } else if (error.response.status < 500) {\r\n                    Swal.fire({\r\n                      icon: 'warning',\r\n                      title: 'Informação',\r\n                      text: error.response.data.message,\r\n                      footer: 'Se o erro persistir, por favor, entre em contacto com o seu departamento',\r\n                    });\r\n                    handleDialogClose()\r\n                  }\r\n\r\n                }\r\n                setSubmitting(false);\r\n              }}\r\n            >\r\n              {(props) => {\r\n                const {\r\n                  values,\r\n                  touched,\r\n                  errors,\r\n                  isSubmitting,\r\n                  handleChange,\r\n                  handleBlur,\r\n                  handleSubmit,\r\n                } = props;\r\n                return (\r\n                  <Form>\r\n                    <Grid container spacing={2}>\r\n                      {/* Campos de entrada aqui */}\r\n                      <Grid item xs={12} sm={6}>\r\n                        <TextField\r\n                          type=\"text\"\r\n                          variant=\"outlined\"\r\n                          name=\"teste\"\r\n                          error={errors.teste && touched.teste}\r\n                          helperText={errors.teste}\r\n                          onChange={handleChange}\r\n                          select\r\n                          value={values.teste}\r\n                          margin=\"dense\"\r\n                          id=\"teste\"\r\n                          fullWidth\r\n                          label=\"Tipo de Avaliação\"\r\n                        >\r\n                          {tipoAvaliacoesFiltradoTeste.map((opt) => (\r\n                            <MenuItem value={opt} key={opt}>\r\n                              {opt}\r\n                            </MenuItem>\r\n                          ))}\r\n                        </TextField>\r\n                      </Grid>\r\n                      <Grid item xs={12} sm={6}>\r\n                        <TextField\r\n                          type=\"text\" variant=\"outlined\" name=\"qtdTeste\"\r\n                          error={(errors.qtdTeste && touched.qtdTeste)}\r\n                          helperText={errors.qtdTeste} onChange={handleChange} onBlur={handleBlur}\r\n                          value={values.qtdTeste} margin=\"dense\"\r\n                          id=\"qtdTeste\" fullWidth label=\"Quantidades de avaliacoes\" />\r\n                      </Grid>\r\n                      <Grid item xs={12} sm={6}>\r\n                        <TextField\r\n                          type=\"text\" variant=\"outlined\" name=\"trabalho\"\r\n                          error={(errors.trabalho && touched.trabalho)}\r\n                          helperText={errors.trabalho}\r\n                          onChange={handleChange}\r\n                          select\r\n                          value={values.trabalho} margin=\"dense\"\r\n                          id=\"trabalho\" fullWidth label=\"Tipo de Avaliacao\">\r\n                          {tipoAvaliacoesFiltradoTrab.map(opt => <MenuItem value={opt} key={opt}>{opt}</MenuItem>)}\r\n                        </TextField>\r\n                      </Grid>\r\n                      <Grid item xs={12} sm={6}>\r\n                        <TextField\r\n                          type=\"text\" variant=\"outlined\" name=\"qtdtrabalho\"\r\n                          error={(errors.qtdtrabalho && touched.qtdtrabalho)}\r\n                          helperText={errors.qtdtrabalho} onChange={handleChange} onBlur={handleBlur}\r\n                          value={values.qtdtrabalho} margin=\"dense\"\r\n                          id=\"qtdtrabalho\" fullWidth label=\"Quantidades de trabalhos\" />\r\n                      </Grid>\r\n\r\n\r\n                    </Grid>\r\n                    <DialogActions>\r\n                      <Button onClick={handleDialogClose}>Cancelar</Button>\r\n                      {/* Botão de envio dentro do formulário */}\r\n                      <Button type=\"submit\" disabled={isSubmitting} >\r\n                        Salvar\r\n                      </Button>\r\n                    </DialogActions>\r\n                  </Form>\r\n                );\r\n              }}\r\n            </Formik>\r\n          </DialogContent>\r\n        </Dialog>\r\n\r\n      )}\r\n\r\n    </div>\r\n  )\r\n}\r\nexport default Card"],"sourceRoot":""}