{"version":3,"sources":["views/forms/teacher/exame.js","views/forms/teacher/Card.js"],"names":["ListaCadeiras","useState","cadeiras","setCadeiras","exame","useEffect","init","now","Date","mes","Array","dataAtual","getDate","getMonth","getFullYear","a","Promise","resolve","requesicoes","getTurmasProfessor","listaCadeiras","data","style","maxWidth","margin","length","map","cadeira","cad","id","severity","tipoAvaliacoes","Card","url","objecto","isDialogOpen","setIsDialogOpen","React","openPais","setOpenPais","updateDom","setUpdateDom","handleDialogOpen","event","preventDefault","handleDialogClose","all","getTipoAvaliacoes","getAvaliacoes","getTurmaCadeirabyCadeiraAndTurma","turma","requestTipoAvaliacao","avaliacoesRequest","turmaCadeira","validationSchema","Yup","shape","qtdtrabalho","min","required","qtdTeste","tipoAvaliacoesFiltradoTeste","filter","opt","tipoAvaliacoesFiltradoTrab","className","nome","curso","semestre","codigo","item","avaliacaoTesteOrdem1","avaliacao","ordem","find","dataRealizacao","novaData","addDays","dataFormatada","format","locale","ptBR","avaliacaoString","onClick","display","to","btoa","open","onClose","aria-labelledby","initialValues","onSubmit","values","setSubmitting","postAvalicoes","Swal","fire","response","status","icon","title","text","message","footer","props","touched","errors","isSubmitting","handleChange","handleBlur","handleSubmit","container","spacing","xs","sm","type","variant","name","error","teste","helperText","onChange","select","value","fullWidth","label","onBlur","trabalho","disabled"],"mappings":"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","file":"static/js/42.ca8327de.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { requesicoes } from '../../../utils/services';\r\nimport Card from './Card';\r\nimport { Alert } from '@mui/material';\r\n\r\nexport default function ListaCadeiras() {\r\n\r\n  const [cadeiras, setCadeiras] = useState([]);\r\n  const [exame, setExame] = useState(true);\r\n\r\n  const docente = 714; //ou 267,289,288\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    init();\r\n  }, [])\r\n  var now = new Date();\r\n  var mes = new Array([\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"])\r\n\r\n  var dataAtual = now.getDate() + \" de \" + mes[now.getMonth()] + \" de \" + now.getFullYear()\r\n\r\n\r\n\r\n  async function init() {\r\n\r\n    const listaCadeiras = await Promise.resolve(requesicoes().getTurmasProfessor(`/${docente}?campos=id,semestre,turma,anoLectivo,cadeira.id,cadeira.codigo,cadeira.nome,curso,docente.id,docente.nome,docente.apelido`))\r\n    setCadeiras(listaCadeiras.data)\r\n   \r\n\r\n  }\r\n\r\n  return (\r\n    <div style={{ maxWidth: 800, margin: '30px auto', }}>\r\n      {cadeiras.length > 0 ? (\r\n        cadeiras.map(cadeira => (\r\n           <Card cadeira={cadeira} cad={dataAtual} key={cadeira.id} exame={exame}/>\r\n        ))\r\n      ) : (\r\n        <Alert severity=\"warning\">Não possui turmas no momento. Porfavor contacte o seu Departamento</Alert>\r\n      )}\r\n    </div>\r\n  )\r\n\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport {\r\n  NavLink\r\n} from \"react-router-dom\";\r\nimport './card.css';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport * as Yup from 'yup'\r\nimport { Formik, Form } from 'formik'\r\nimport { Button, DialogActions, DialogContent, DialogContentText, DialogTitle, Grid, MenuItem, TextField } from '@mui/material';\r\nimport Swal from 'sweetalert2';\r\nimport { requesicoes } from '../../../utils/services';\r\nimport { addDays, format } from 'date-fns';\r\nimport { ptBR } from 'date-fns/locale';\r\n\r\nlet tipoAvaliacoes = []\r\nlet turma = [];\r\nlet avaliacoes = []\r\nconst Card = ({ cadeira, data, exame, url }) => {\r\n\r\n  const objecto = cadeira\r\n  // console.log(JSON.stringify(objecto.turma.id), 'Turma-id');\r\n  // console.log(JSON.stringify(data), 'data');\r\n\r\n\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [openPais, setOpenPais] = React.useState(false);\r\n  const [updateDom, setUpdateDom] = useState(false);\r\n\r\n\r\n\r\n  const handleDialogOpen = (event) => {\r\n    event.preventDefault();\r\n    setOpenPais(true);\r\n    setIsDialogOpen(true)\r\n  };\r\n\r\n  const handleDialogClose = () => {\r\n    setIsDialogOpen(false);\r\n  };\r\n\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    init();\r\n  }, [])\r\n\r\n  async function init() {\r\n    const [requestTipoAvaliacao, avaliacoesRequest, turmaCadeira] = await Promise.all([requesicoes().getTipoAvaliacoes(), requesicoes().getAvaliacoes(), requesicoes().getTurmaCadeirabyCadeiraAndTurma(`/${objecto.cadeira.id}/${objecto.turma.id}?campos=id,anoLectivo,turma,cadeira`)]);\r\n    tipoAvaliacoes = requestTipoAvaliacao.data\r\n    avaliacoes = avaliacoesRequest.data;\r\n    // console.log('avaliacoes', avaliacoes);\r\n    turma = turmaCadeira.data\r\n    // console.log('turma ',turma);\r\n    setUpdateDom(!updateDom);\r\n  }\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    qtdtrabalho: Yup.number().min(1, 'O número mínimo de avalicoes é de 1').required(\"Campo Obrigatorio\"),\r\n    qtdTeste: Yup.number().min(2, \"O número mínimo de avalicoes é de 2\").required(\"Campo Obrigatorio\"),\r\n  })\r\n\r\n  const tipoAvaliacoesFiltradoTeste = tipoAvaliacoes.filter(opt => opt !== \"Exame\" && opt !== \"Rec\" && opt !== \"Trab\");\r\n  const tipoAvaliacoesFiltradoTrab = tipoAvaliacoes.filter(opt => opt !== \"Exame\" && opt !== \"Rec\" && opt !== \"Teste\");\r\n\r\n\r\n  return (\r\n\r\n    <div className=\"cadeira-card\" key={objecto.id}>\r\n      <div className=\"cadeira-card__info\">\r\n        <div className=\"cadeira-card__titulo\" ><span className=\"cadeira-card__codigo\"> Cadeira:</span> {objecto.cadeira.nome} <span className=\"cadeira-card__codigo\"> Curso: {objecto.curso.nome} </span> <span className=\"title_turma\">Turma:<span className=\"turma\">{objecto.turma.turma}</span></span> </div><br />\r\n        <footer className=\"cadeira-card__semestre\"><span >Semestre:  <span className=\"cadeira-card__titulo\"> {objecto.semestre}</span></span></footer>\r\n        <span className=\"cadeira-card__codigo\" >Codigo:</span> <span className=\"cadeira-card__titulo\">{objecto.cadeira.codigo}</span>\r\n        <footer className=\"cadeira-card__footer\">\r\n          {/* Aqui deve ver se eh ultimo dia de lancamneto de Ordem */}\r\n          {data.map((item) => {\r\n            const avaliacaoTesteOrdem1 = item.avaliacao === \"Teste\" && item.ordem === 1;\r\n            // console.log('avaliacaoTesteOrdem1 ', avaliacaoTesteOrdem1);\r\n            const cadeiraEncontrada = item.cadeiras.find(cadeira => cadeira.id === objecto.cadeira.id);\r\n            // console.log('cadeiraEncontrada ', cadeiraEncontrada);\r\n            if (cadeiraEncontrada && avaliacaoTesteOrdem1) {\r\n              const dataRealizacao = new Date(item.dataRealizacao);\r\n              const novaData = addDays(dataRealizacao, 7);\r\n              const dataFormatada = format(novaData, 'd MMMM yyyy', { locale: ptBR });\r\n              const avaliacaoString = `Último dia de Lançamento das notas  ${item.ordem === 1 ? ' das Primeiras Avaliações' : item.ordem === 2 ? ' das Segundas Avaliações ' : item.avaliacao === 'Exame' ? 'do Exame Normal' : ' de Recorrência'}  `;\r\n              // console.log('dataFormatada ', dataFormatada);\r\n              return (\r\n                <div key={item.id}>\r\n                  <div>{avaliacaoString}</div>\r\n                  <div>{dataFormatada}</div>\r\n                </div>\r\n              );\r\n            }\r\n\r\n            return null;\r\n          })}\r\n\r\n          <div className=\"cadeira-card__comments-count\">\r\n\r\n          </div>\r\n          {\r\n            url == '/teacher/notas/pauta' ?\r\n              <Button className=\"cadeira-card__pauta\" onClick={handleDialogOpen} style={{ display: exame ? 'none' : 'block' }}>\r\n                Imprimir Pauta\r\n              </Button>\r\n              :\r\n              <Button className=\"cadeira-card__pauta\" onClick={handleDialogOpen} style={{ display: exame ? 'none' : 'block' }}>\r\n                Difinir Avaliações\r\n              </Button>\r\n          }\r\n\r\n          {url == '/teacher/notas/pauta' ? <NavLink className=\"cadeira-card__pauta\" to={`/teacher/pauta?cadeira=${btoa(objecto.cadeira.id)}&curso=${btoa(objecto.curso.id)}&turma=${btoa(objecto.turma.id)}`}>\r\n            Ver a Pauta\r\n          </NavLink>\r\n            :\r\n            (exame ? (\r\n              <NavLink className=\"cadeira-card__pauta\" to={`/teacher/notasExame?cadeira=${btoa(objecto.cadeira.id)}&curso=${btoa(objecto.curso.id)}&turma=${btoa(objecto.turma.id)}`}>\r\n                Lançar Notas de Exame\r\n              </NavLink>\r\n            ) : (\r\n\r\n              <NavLink className=\"cadeira-card__pauta\" to={`/pauta/pautaCadeira?cadeira=${btoa(objecto.cadeira.id)}&curso=${btoa(objecto.curso.id)}&turma=${btoa(objecto.turma.id)}`}>\r\n                Lançar Notas\r\n              </NavLink>\r\n            ))}\r\n        </footer>\r\n      </div>\r\n\r\n      {isDialogOpen && (\r\n\r\n        <Dialog open={openPais} onClose={handleDialogClose} aria-labelledby=\"form-dialog-title\">\r\n          <DialogTitle id=\"form-dialog-title\">Tipo da Avaliação</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText>\r\n              Por favor, defina o tipo de avaliação e a quantidade de avaliações\r\n            </DialogContentText>\r\n            <Formik\r\n              initialValues={{}}\r\n              validationSchema={validationSchema}\r\n              onSubmit={async (values, { setSubmitting }) => {\r\n                try {\r\n\r\n                  values.cadeira = objecto.cadeira\r\n                  values.turma = objecto.turma\r\n                  await Promise.resolve(requesicoes().postAvalicoes([values]));\r\n                  Swal.fire('Êxito!', 'Avaliação cadastrada com sucesso!', 'success');\r\n                  handleDialogClose()\r\n                  init();\r\n                } catch (error) {\r\n                  if (error.response.status >= 500) {\r\n                    // console.log('=====Entrou aqui: ', error.response.status);\r\n\r\n                    Swal.fire({\r\n                      icon: 'error',\r\n                      title: 'Erro',\r\n                      text: error.response.data.message,\r\n                      footer: 'Se o erro persistir, por favor, entre em contacto com o Centro Informático',\r\n                    });\r\n                    handleDialogClose()\r\n                  } else if (error.response.status < 500) {\r\n                    Swal.fire({\r\n                      icon: 'warning',\r\n                      title: 'Informação',\r\n                      text: error.response.data.message,\r\n                      footer: 'Se o erro persistir, por favor, entre em contacto com o seu departamento',\r\n                    });\r\n                    handleDialogClose()\r\n                  }\r\n\r\n                }\r\n                setSubmitting(false);\r\n              }}\r\n            >\r\n              {(props) => {\r\n                const {\r\n                  values,\r\n                  touched,\r\n                  errors,\r\n                  isSubmitting,\r\n                  handleChange,\r\n                  handleBlur,\r\n                  handleSubmit,\r\n                } = props;\r\n                return (\r\n                  <Form>\r\n                    <Grid container spacing={2}>\r\n                      {/* Campos de entrada aqui */}\r\n                      <Grid item xs={12} sm={6}>\r\n                        <TextField\r\n                          type=\"text\"\r\n                          variant=\"outlined\"\r\n                          name=\"teste\"\r\n                          error={errors.teste && touched.teste}\r\n                          helperText={errors.teste}\r\n                          onChange={handleChange}\r\n                          select\r\n                          value={values.teste}\r\n                          margin=\"dense\"\r\n                          id=\"teste\"\r\n                          fullWidth\r\n                          label=\"Tipo de Avaliação\"\r\n                        >\r\n                          {tipoAvaliacoesFiltradoTeste.map((opt) => (\r\n                            <MenuItem value={opt} key={opt}>\r\n                              {opt}\r\n                            </MenuItem>\r\n                          ))}\r\n                        </TextField>\r\n                      </Grid>\r\n                      <Grid item xs={12} sm={6}>\r\n                        <TextField\r\n                          type=\"text\" variant=\"outlined\" name=\"qtdTeste\"\r\n                          error={(errors.qtdTeste && touched.qtdTeste)}\r\n                          helperText={errors.qtdTeste} onChange={handleChange} onBlur={handleBlur}\r\n                          value={values.qtdTeste} margin=\"dense\"\r\n                          id=\"qtdTeste\" fullWidth label=\"Quantidades de avaliacoes\" />\r\n                      </Grid>\r\n                      <Grid item xs={12} sm={6}>\r\n                        <TextField\r\n                          type=\"text\" variant=\"outlined\" name=\"trabalho\"\r\n                          error={(errors.trabalho && touched.trabalho)}\r\n                          helperText={errors.trabalho}\r\n                          onChange={handleChange}\r\n                          select\r\n                          value={values.trabalho} margin=\"dense\"\r\n                          id=\"trabalho\" fullWidth label=\"Tipo de Avaliacao\">\r\n                          {tipoAvaliacoesFiltradoTrab.map(opt => <MenuItem value={opt} key={opt}>{opt}</MenuItem>)}\r\n                        </TextField>\r\n                      </Grid>\r\n                      <Grid item xs={12} sm={6}>\r\n                        <TextField\r\n                          type=\"text\" variant=\"outlined\" name=\"qtdtrabalho\"\r\n                          error={(errors.qtdtrabalho && touched.qtdtrabalho)}\r\n                          helperText={errors.qtdtrabalho} onChange={handleChange} onBlur={handleBlur}\r\n                          value={values.qtdtrabalho} margin=\"dense\"\r\n                          id=\"qtdtrabalho\" fullWidth label=\"Quantidades de trabalhos\" />\r\n                      </Grid>\r\n\r\n\r\n                    </Grid>\r\n                    <DialogActions>\r\n                      <Button onClick={handleDialogClose}>Cancelar</Button>\r\n                      {/* Botão de envio dentro do formulário */}\r\n                      <Button type=\"submit\" disabled={isSubmitting} >\r\n                        Salvar\r\n                      </Button>\r\n                    </DialogActions>\r\n                  </Form>\r\n                );\r\n              }}\r\n            </Formik>\r\n          </DialogContent>\r\n        </Dialog>\r\n\r\n      )}\r\n\r\n    </div>\r\n  )\r\n}\r\nexport default Card"],"sourceRoot":""}