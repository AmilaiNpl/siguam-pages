{"version":3,"sources":["views/forms/subject/Components/individualExcelData.js","views/forms/subject/Components/Data.js","views/forms/subject/carregar.js"],"names":["IndividualData","individualExcelData","codigo","nome","cadeirasPrecendentes","cargaHoraria","departamento","Data","excelData","map","referencia","useStyles","makeStyles","root","backgroundColor","departamentos","cadeiras","Carregar","classes","useState","excelFile","setExcelFile","excelFileError","setExcelFileError","hidden","setHidden","mostrarMessagemErro","setMostrarMessagemErro","mostrarMessagemSucesso","detalhe","setDetalhe","setExcelData","data","setData","updateDOM","setUpdateDOM","a","Promise","all","requesicoes","buscarCadeiras","buscarDepartamentos","listacadeiras","listadepartamento","useEffect","init","fileType","removerEspacosNaoPadrao","texto","replace","resolve","postCadeira","Swal","fire","response","mensagemUsuario","setTimeout","className","role","autoComplete","onSubmit","e","preventDefault","workbook","XLSX","type","worksheetName","SheetNames","worksheet","Sheets","sheet_to_json","item","cadeiraPre","find","c","cade","dpt","d","dados","onChange","selectedFile","target","files","includes","reader","FileReader","readAsArrayBuffer","onload","result","console","log","required","style","marginTop","scope","Button","variant","color","size","onClick","salvar","button","startIcon","float"],"mappings":"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","file":"static/js/45.8ee30981.chunk.js","sourcesContent":["export const IndividualData = ({ individualExcelData }) => {\r\n    return (\r\n        <>\r\n            <th>{individualExcelData.codigo}</th>\r\n            <th>{individualExcelData.nome}</th>\r\n            <th>{individualExcelData.cadeirasPrecendentes}</th> \r\n            <th>{individualExcelData.cargaHoraria}</th> \r\n            <th>{individualExcelData.departamento}</th> \r\n           \r\n           \r\n        </>\r\n    );\r\n};\r\n","import { IndividualData } from \"./individualExcelData\";\r\n\r\nexport const Data = ({ excelData }) => {\r\n    return excelData.map((individualExcelData) => (\r\n        <tr key={individualExcelData.referencia}>\r\n            <IndividualData individualExcelData={individualExcelData} />\r\n        </tr>\r\n    ));\r\n};\r\n","import { useState } from 'react';\r\nimport { Data } from './Components/Data';\r\nimport * as XLSX from 'xlsx';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { Button } from '@mui/material';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport { requesicoes } from \"../../../utils/services\";\r\nimport { useEffect } from 'react';\r\nimport Swal from 'sweetalert2';\r\n\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        '&:hover': {\r\n            backgroundColor: 'transparent'\r\n        }\r\n    }\r\n}));\r\n\r\nlet departamentos=[]\r\nlet cadeiras =[]\r\n\r\nexport default function Carregar() {\r\n    const classes = useStyles();\r\n    // on change states\r\n    const [excelFile, setExcelFile] = useState(null);\r\n    const [excelFileError, setExcelFileError] = useState(null);\r\n    const [hidden, setHidden] = useState(true);\r\n    const [mostrarMessagemErro, setMostrarMessagemErro] = useState(true);\r\n    const [mostrarMessagemSucesso, setMostrarMessagemSucesso] = useState(true);\r\n    const [detalhe, setDetalhe] = useState(null);\r\n    const [excelData, setExcelData] = useState(null);\r\n    const [data, setData] = useState(null);\r\n    const [updateDOM, setUpdateDOM] = useState(false);\r\n\r\n\r\n\r\n    \r\n    useEffect(() => {\r\n\r\n        init();\r\n    }, [])\r\n\r\n    async function init() {\r\n\r\n        const [listacadeiras, listadepartamento] = await Promise.all([\r\n            requesicoes().buscarCadeiras('?campos=id,nome'),\r\n          requesicoes().buscarDepartamentos('?campos=id,nome')]);\r\n\r\n        cadeiras = listacadeiras.data\r\n        departamentos = listadepartamento.data\r\n\r\n        setUpdateDOM(!updateDOM);\r\n\r\n    }\r\n\r\n    const fileType = ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];\r\n    const handleFile = (e) => {\r\n        let selectedFile = e.target.files[0];\r\n\r\n        if (selectedFile) {\r\n            if (selectedFile && fileType.includes(selectedFile.type)) {\r\n                let reader = new FileReader();\r\n                reader.readAsArrayBuffer(selectedFile);\r\n                reader.onload = (e) => {\r\n                    setExcelFileError(null);\r\n                    setExcelFile(e.target.result);\r\n                };\r\n            } else {\r\n                setExcelFileError('Por favor selecione um ficheiro excel');\r\n                setExcelFile(null);\r\n            }\r\n        } else {\r\n            console.log('Por favor selecione um ficheiro');\r\n        }\r\n    };\r\n\r\n    function removerEspacosNaoPadrao(texto) {\r\n        return texto.replace(/\\s+/g, ' ');\r\n    }\r\n    \r\n\r\n    // submit function\r\n    const handleSubmit = (e) => {\r\n        setHidden(false);\r\n        e.preventDefault();\r\n\r\n        if (excelFile !== null) {\r\n            const workbook = XLSX.read(excelFile, { type: 'buffer' });\r\n            const worksheetName = workbook.SheetNames[0];\r\n            const worksheet = workbook.Sheets[worksheetName];\r\n            const data = XLSX.utils.sheet_to_json(worksheet).map(item => {\r\n\r\n                const cadeiraPre = cadeiras.find(c =>(c.nome)===(item.cadeirasPrecendentes))\r\n\r\n                const cade=cadeiraPre ? cadeiraPre : null\r\n                const dpt = departamentos.find(d=>removerEspacosNaoPadrao(d.nome) ===removerEspacosNaoPadrao(item.departamento))\r\n                 const departamento = dpt ? dpt :null;\r\n\r\n                item.cadeirasPrecendentes = [cade]; \r\n                item.departamento = departamento;\r\n            \r\n                return item;\r\n            });\r\n            setData(data);\r\n\r\n           \r\n            const dados = data.map((item) => {\r\n                const dpt = departamentos.find(d=>d.nome ===item.departamento?.nome)\r\n\r\n               if(!item.cadeirasPrecendentes){\r\n                setExcelFileError(`Não encontrou Cadeira precedente da Cadeira ${item.nome}`)\r\n               }\r\n               \r\n               if (!dpt) {\r\n                setExcelFileError(`Não encontrou Departamento da Cadeira ${item.nome}`)\r\n            }\r\n               \r\n               const departamento=dpt ? dpt : null\r\n                return {\r\n                    ...item,\r\n                    departamento: departamento?.nome,\r\n                    cadeirasPrecendentes: item.cadeirasPrecendentes?.map(c=>c?.nome),\r\n                };\r\n            });\r\n            setExcelData(dados);\r\n        } else {\r\n            setExcelData(null);\r\n        }\r\n    };\r\n    //Salvar no BD\r\n    async function salvar(data) {\r\n        // console.log('=======Dados: ',JSON.stringify(data));\r\n        try {\r\n             await Promise.resolve(requesicoes().postCadeira(data));\r\n             Swal.fire(\r\n                'Exito!',\r\n                'Salvou com sucesso!',\r\n                'success'\r\n            )\r\n\r\n            // setMostrarMessagemSucesso(!mostrarMessagemSucesso);\r\n        setUpdateDOM(!updateDOM);\r\n            // setTimeout(function () {\r\n            //     setMostrarMessagemSucesso(true);\r\n            // }, 5000);\r\n        } catch (e) {\r\n            setDetalhe(e.response.data.mensagemUsuario);\r\n            setMostrarMessagemErro(false);\r\n            setTimeout(function () {\r\n                setMostrarMessagemErro(true);\r\n            }, 5000);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"alert alert-danger\" role=\"alert\" hidden={mostrarMessagemErro}>\r\n                {detalhe}\r\n            </div>\r\n            <div className=\"alert alert-primary\" role=\"alert\" hidden={mostrarMessagemSucesso}>\r\n                Cadeiras Salvo suceso\r\n            </div>\r\n            {/* Carregar Ficheiro */}\r\n            <div className=\"form\">\r\n                <form className=\"form-group\" autoComplete=\"off\" onSubmit={handleSubmit}>\r\n                    <h5>Carregar Cadeiras</h5>\r\n                    <br></br>\r\n                    <input type=\"file\" className=\"form-control\" onChange={handleFile} required></input>\r\n                    {excelFileError && (\r\n                        <div className=\"text-danger\" style={{ marginTop: 5 + 'px' }}>\r\n                            {excelFileError}\r\n                        </div>\r\n                    )}\r\n                    <button className=\"btn btn-success\" style={{ marginTop: 5 + 'px' }}>\r\n                        Visualisar\r\n                    </button>\r\n                </form>\r\n            </div>\r\n\r\n            <br></br>\r\n            <hr></hr>\r\n\r\n            {/* Vizualicao dos dados do ficheiro */}\r\n            <h5>Lista de Pagamentos</h5>\r\n            <div className=\"viewer\">\r\n                {excelData === null && <>Nenhum conteudo selecionado</>}\r\n                {excelData !== null && (\r\n                    <div className=\"table-responsive\">\r\n                        <table className=\"table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th scope=\"col\">Código</th>\r\n                                    <th scope=\"col\">Nome</th>\r\n                                    <th scope=\"col\">Cadeira Precedente</th>\r\n                                    <th scope=\"col\">Carga Horaria </th>\r\n                                    <th scope=\"col\">Departamento</th>\r\n\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <Data excelData={excelData} />\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                )}\r\n            </div>\r\n            {!excelFileError &&( <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                type=\"submit\"\r\n                size=\"large\"\r\n                onClick={() => {\r\n                    salvar(data);\r\n                }}\r\n                className={classes.button}\r\n                startIcon={<SaveIcon />}\r\n                style={{ float: 'right' }}\r\n                hidden={hidden}\r\n            >\r\n                Salvar\r\n            </Button>)}\r\n           \r\n        </div>\r\n    );\r\n}\r\n"],"sourceRoot":""}