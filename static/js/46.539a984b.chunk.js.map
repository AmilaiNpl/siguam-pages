{"version":3,"sources":["views/forms/pauta/CardRegisto.js","views/forms/pauta/pauta.js"],"names":["tipoAvaliacoes","currentUser","CardRegisto","cadeira","data","objecto","useState","updateDom","setUpdateDom","isDialogOpen","setIsDialogOpen","React","setOpenPais","carregando","setCarregando","handleDialogClose","a","Promise","resolve","requesicoes","getTipoAvaliacao","requestTipoAvaliacao","useEffect","authService","getCurrentUser","init","setTimeout","handleDialogOpen","event","preventDefault","validationSchema","Yup","shape","ordem","min","required","style","display","justifyContent","alignItems","width","marginTop","MoonLoader","color","className","nome","curso","docente","apelido","turma","semestre","codigo","map","item","avaliacaoTesteOrdem1","avaliacao","cadeiras","find","id","dataRealizacao","Date","novaData","addDays","dataFormatada","format","locale","ptBR","avaliacaoString","authorities","to","btoa","Button","onClick","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","initialValues","onSubmit","values","setSubmitting","console","log","JSON","stringify","postPais","Swal","fire","icon","title","text","footer","save","props","touched","errors","handleChange","dirty","isSubmitting","handleBlur","handleSubmit","handleReset","setFieldValue","Grid","container","spacing","xs","sm","TextField","type","variant","name","error","tipoAvaliacao","helperText","onChange","select","value","margin","fullWidth","label","opt","MenuItem","onBlur","DialogActions","usuario","dpt","Pauta","setCadeiras","dataTesteCadeira","setDataTesteCadeira","getUsuarioLogado","sub","usuarioDpt","all","getCalendario","getTurmasCadeiras","listaCalendario","listaCadeiras","cadeirasDepart","filter","c","departamento","usuarioLagado","maxWidth"],"mappings":"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","file":"static/js/46.539a984b.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {\r\n  NavLink\r\n} from \"react-router-dom\";\r\nimport '../teacher/card.css';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport * as Yup from 'yup'\r\nimport { Formik, Form } from 'formik'\r\nimport { Button, DialogActions, DialogContent, DialogContentText, DialogTitle, Grid, MenuItem, TextField } from '@mui/material';\r\nimport Swal from 'sweetalert2';\r\nimport { requesicoes } from '../../../utils/services';\r\nimport { addDays, format } from 'date-fns';\r\nimport { ptBR } from 'date-fns/locale';\r\nimport { MoonLoader } from 'react-spinners';\r\nimport authService from '../../../utils/services/auth';\r\n\r\nlet tipoAvaliacoes = []\r\nlet currentUser = null\r\nconst CardRegisto = ({ cadeira, data }) => {\r\n\r\n  //const codigo = useParams('')\r\n  const objecto = cadeira\r\n\r\n  const [updateDom, setUpdateDom] = useState(false);\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [openPais, setOpenPais] = React.useState(false);\r\n  const [carregando, setCarregando] = useState(true);\r\n\r\n  const handleDialogClose = () => {\r\n    setIsDialogOpen(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    currentUser = authService.getCurrentUser();\r\n    init();\r\n    setTimeout(() => {\r\n      setCarregando(false);\r\n    }, 5000);\r\n  }, [])\r\n\r\n  async function init() {\r\n    setCarregando(true);\r\n    const requestTipoAvaliacao = await Promise.resolve(requesicoes().getTipoAvaliacao());\r\n    tipoAvaliacoes = requestTipoAvaliacao.data\r\n    setUpdateDom(!updateDom);\r\n    setCarregando(false);\r\n\r\n  }\r\n  const handleDialogOpen = (event) => {\r\n    event.preventDefault();\r\n    setOpenPais(true);\r\n    setIsDialogOpen(true)\r\n  };\r\n  const validationSchema = Yup.object().shape({\r\n    ordem: Yup.string().min(1, \"Deve ter no minio 3 caratere\").required(\"Campo Obrigatorio\"),\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      {carregando ? (\r\n        <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', width: '100%', marginTop: '20%' }}>\r\n          <MoonLoader color=\"#36d7b7\" />\r\n        </div>\r\n\r\n      ) : (<div className=\"cadeira-card\" key={objecto.id}>\r\n        <div className=\"cadeira-card__info\">\r\n          <div className=\"cadeira-card__titulo\" ><span className=\"cadeira-card__codigo\"> Cadeira:</span> {objecto.cadeira.nome} <span className=\"cadeira-card__codigo\"> Curso: {objecto.curso.nome} </span><span className=\"title_turma_professor\">Professor:</span><>{objecto.docente.nome} {objecto.docente.apelido}</> <span className=\"title_turma_professor\" >Turma:<span className=\"turma\">{objecto.turma.turma}</span></span> </div><br />\r\n          <footer className=\"cadeira-card__semestre\"><span >Semestre:  <span className=\"cadeira-card__titulo\"> {objecto.semestre}</span></span></footer>\r\n          <span className=\"cadeira-card__codigo\" >Codigo:</span> <span className=\"cadeira-card__titulo\">{objecto.cadeira.codigo}</span>\r\n          <footer className=\"cadeira-card__footer\">\r\n            {data.map((item) => {\r\n              const avaliacaoTesteOrdem1 = item.avaliacao === \"Teste\" && item.ordem === 1;\r\n              // console.log('avaliacaoTesteOrdem1 ', avaliacaoTesteOrdem1);\r\n              const cadeiraEncontrada = item.cadeiras.find(cadeira => cadeira.id === objecto.cadeira.id);\r\n              // console.log('cadeiraEncontrada ', cadeiraEncontrada);\r\n              if (cadeiraEncontrada && avaliacaoTesteOrdem1) {\r\n                const dataRealizacao = new Date(item.dataRealizacao);\r\n                const novaData = addDays(dataRealizacao, 7);\r\n                const dataFormatada = format(novaData, 'd MMMM yyyy', { locale: ptBR });\r\n                const avaliacaoString = `Último dia de Lançamento das notas  ${item.ordem === 1 ? ' das Primeiras Avaliações' : item.ordem === 2 ? ' das Segundas Avaliações ' : item.avaliacao === 'Exame' ? 'do Exame Normal' : ' de Recorrência'}  `;\r\n                // console.log('dataFormatada ', dataFormatada);\r\n                return (\r\n                  <div key={item.id}>\r\n                    <div>{avaliacaoString}</div>\r\n                    <div>{dataFormatada}</div>\r\n                  </div>\r\n                );\r\n              }\r\n\r\n              return null;\r\n            })}\r\n            <div className=\"cadeira-card__comments-count\">\r\n\r\n            </div>\r\n            {currentUser.authorities[0] !== 'DPT' ? (<div>\r\n              {currentUser.authorities[0] === 'RA_N2' || currentUser.authorities[0] === 'RA_N3' ?\r\n                <div>\r\n                  <NavLink className=\"cadeira-card__pauta\" to={`/teacher/pauta?cadeira=${btoa(objecto.cadeira.id)}&curso=${btoa(objecto.curso.id)}&turma=${btoa(objecto.turma.id)}`} >Ver Pauta</NavLink>\r\n                  <Button className=\"cadeira-card__pauta\" onClick={handleDialogOpen} >\r\n                    Difinir Avaliações\r\n                  </Button>\r\n                </div> : <div>\r\n                  <Button className=\"cadeira-card__pauta\" onClick={handleDialogOpen} >\r\n                    Difinir Avaliações\r\n                  </Button>\r\n                  <NavLink className=\"cadeira-card__pauta\" to={`/pauta/pautaCadeira?cadeira=${btoa(objecto.cadeira.id)}&curso=${btoa(objecto.curso.id)}&turma=${btoa(objecto.turma.turma)}`}>Lançar Notas</NavLink>\r\n                  <NavLink className=\"cadeira-card__pauta\" to={`/teacher/pauta?cadeira=${btoa(objecto.cadeira.id)}&curso=${btoa(objecto.curso.id)}&turma=${btoa(objecto.turma.id)}`} >Pauta</NavLink>\r\n\r\n                </div>\r\n              }\r\n\r\n\r\n              {/* <NavLink className=\"cadeira-card__pauta\" to={`/teacher/pauta?cadeira=${btoa(objecto.cadeira.id)}&curso=${btoa(objecto.curso.id)}&turma=${btoa(objecto.turma.id)}`} >Pauta</NavLink> */}\r\n\r\n            </div>) :\r\n              <NavLink className=\"cadeira-card__pauta\" to={`/teacher/pauta?cadeira=${btoa(objecto.cadeira.id)}&curso=${btoa(objecto.curso.id)}&turma=${btoa(objecto.turma.id)}`} >Ver Pauta</NavLink>\r\n            }\r\n\r\n          </footer>\r\n        </div>\r\n\r\n        {isDialogOpen && (\r\n          <Dialog onClose={handleDialogClose} aria-labelledby=\"form-dialog-title\">\r\n            <DialogTitle id=\"form-dialog-title\">Tipo da Avaliacao</DialogTitle>\r\n            <DialogContent>\r\n              <DialogContentText>\r\n                Profavor difina o tipo de avalicao e a respetiva ordem\r\n              </DialogContentText>\r\n              <Formik initialValues={{}} validationSchema={validationSchema}\r\n\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                  async function save(values) {\r\n\r\n                    console.log(JSON.stringify(values), 'Dados')\r\n\r\n                    try {\r\n\r\n                      await Promise.resolve(requesicoes().postPais([values]));\r\n                      //setOpen(true)\r\n\r\n\r\n                    } catch (error) {\r\n                      Swal.fire({\r\n                        icon: 'error',\r\n                        title: 'Oops...',\r\n                        text: 'Ocorreu um erro !!',\r\n                        footer: 'Se o erro pressistir porfavor contacte o centro Informatico'\r\n                      })\r\n\r\n                    }\r\n                  }\r\n                  save(values);\r\n                  setTimeout(() => {\r\n                    setSubmitting(false);\r\n                  }, 500);\r\n                }}>\r\n                {(props) => {\r\n                  const { values, touched, errors, dirty, isSubmitting,\r\n                    handleChange, handleBlur, handleSubmit, handleReset, setFieldValue } = props;\r\n                  return (\r\n                    <Form>\r\n                      <Grid container spacing={2}>\r\n\r\n                        <Grid item xs={12} sm={6}>\r\n                          <TextField\r\n                            type=\"text\" variant=\"outlined\" name=\"tipoAvaliacao\"\r\n                            error={(errors.tipoAvaliacao && touched.tipoAvaliacao)}\r\n                            helperText={errors.tipoAvaliacao}\r\n                            onChange={handleChange}\r\n                            select\r\n                            value={values.tipoAvaliacao} margin=\"dense\"\r\n                            id=\"tipoAvaliacao\" fullWidth label=\"Tipo de Avaliacao\">\r\n                            {tipoAvaliacoes.map(opt => <MenuItem value={opt} key={opt}>{opt}</MenuItem>)}\r\n                          </TextField>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                          <TextField\r\n                            type=\"text\" variant=\"outlined\" name=\"ordem\"\r\n                            error={(errors.ordem && touched.ordem)}\r\n                            helperText={errors.ordem} onChange={handleChange} onBlur={handleBlur}\r\n                            value={values.ordem} margin=\"dense\"\r\n                            id=\"ordem\" fullWidth label=\"Ordem\" />\r\n                        </Grid>\r\n\r\n                      </Grid>\r\n                      <DialogActions>\r\n                        <Button onClick={handleDialogClose}>Cancelar</Button>\r\n                        <Button type=\"submit\" onClick={handleDialogClose}>Salvar</Button>\r\n                      </DialogActions>\r\n                    </Form>)\r\n                }}\r\n              </Formik>\r\n            </DialogContent>\r\n\r\n\r\n          </Dialog>\r\n        )}\r\n\r\n      </div>)}\r\n    </div>\r\n\r\n  )\r\n}\r\nexport default CardRegisto","import React, { useState, useEffect } from 'react';\r\nimport { requesicoes } from '../../../utils/services';\r\nimport CardRegisto from './CardRegisto';\r\nimport authService from '../../../utils/services/auth';\r\n\r\nlet usuario = null\r\nlet dpt = null\r\nconst Pauta = () => {\r\n  const [cadeiras, setCadeiras] = useState([]);\r\n  const [updateDom, setUpdateDom] = useState(false);\r\n  const [dataTesteCadeira, setDataTesteCadeira] = useState([]);\r\n  const [carregando, setCarregando] = useState(true);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    usuario = authService.getCurrentUser();\r\n    usuarioLagado()\r\n    setTimeout(() => {\r\n      setCarregando(false);\r\n    }, 5000);\r\n    init();\r\n  }, [])\r\n\r\n  async function usuarioLagado() {\r\n    setCarregando(true);\r\n    const usuarioDpt = await requesicoes().getUsuarioLogado(usuario.sub, '?campos=id,numero')\r\n    dpt = usuarioDpt.data\r\n    setCarregando(false)\r\n  }\r\n\r\n  async function init() {\r\n    const [listaCalendario, listaCadeiras] = await Promise.all([requesicoes().getCalendario(`?campos=id,avaliacao,ordem,cadeiras.id,cadeiras.nome,dataRealizacao`),\r\n    requesicoes().getTurmasCadeiras('?campos=id,semestre,departamento,turma,anoLectivo,cadeira.id,cadeira.departamento,cadeira.codigo,cadeira.nome,curso,docente.id,docente.nome,docente.apelido')])\r\n\r\n    if (usuario.authorities[0] === 'DPT') {\r\n      console.log('listaCadeiras.data ',JSON.stringify(listaCadeiras.data));\r\n      const cadeirasDepart = listaCadeiras.data.filter(c => c.cadeira.departamento.id === dpt.dpt.id)\r\n      console.log('cadeirasDepart ', cadeirasDepart);\r\n      setCadeiras(cadeirasDepart)\r\n      setCarregando(false)\r\n      setUpdateDom(!updateDom);\r\n    } else {\r\n      setCadeiras(listaCadeiras.data)\r\n      setCarregando(false)\r\n      setUpdateDom(!updateDom);\r\n    }\r\n    setDataTesteCadeira(listaCalendario.data)\r\n    setUpdateDom(!updateDom);\r\n\r\n\r\n  }\r\n\r\n  return (\r\n    <div style={{ maxWidth: 800, margin: '30px auto', }}>\r\n      {cadeiras.map(cadeira => (<CardRegisto cadeira={cadeira} data={dataTesteCadeira} />))}\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Pauta;\r\n"],"sourceRoot":""}