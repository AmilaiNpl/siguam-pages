{"version":3,"sources":["../node_modules/react-spinners/esm/ClockLoader.js","views/forms/student/exame.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","rotate","createAnimation","ClockLoader","_a","_b","loading","_c","color","_d","speedMultiplier","_e","cssOverride","_f","size","additionalprops","_g","parseLengthAndUnit","value","unit","wrapper","display","position","width","concat","height","backgroundColor","boxShadow","borderRadius","minute","top","left","transformOrigin","animation","hour","React","style","listaMatricula","anosMatricula","avaliacoes","currentUser","estudante","card","Fragment","CardContent","Typography","sx","fontSize","variant","gutterBottom","tiposAvaliacaoOrdemUnicos","CardConsulta","props","useState","anoSelecionado","setAnoSelecionado","updateDom","setUpdateDom","carregando","setCarregando","mostrarMensagem","setMostrarMensagem","cadeirasMatriculdas","setCadeirasMatriculdas","a","requesicoes","getEstudanteByNumero","sub","init","Promise","resolve","getMatriculaByEstudante","data","id","forEach","matricula","dataMatricula","anoMatricula","Date","getFullYear","includes","push","getTeste","Array","from","Set","map","avaliacao","tipoAvaliacao","ordem","filter","tipo","startsWith","flatMap","m","cadeiras","cadeira","nome","useEffect","authService","getCurrentUser","usuarioLagado","setTimeout","timeoutID","clearTimeout","calcularMediaExame","frequenciaEstudante","notaExame","notaRecorrencia","notaExameFloat","parseFloat","notaRecorrenciaFloat","isNaN","toFixed","calculateMedia","notas","notasValidas","values","nota","reduce","acc","Alert","severity","AlertTitle","justifyContent","alignItems","Box","minWidth","Card","Grid","container","spacing","item","xs","sm","className","TextField","type","name","onChange","event","target","select","margin","fullWidth","label","opt","MenuItem","Button","onClick","marginTop","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","index","notasDisciplina","matriculaEstudante","find","some","cadeiraMat","tipoAvaliacaoOrdem","split","parseInt","anoFrequencia","undefined"],"mappings":"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","file":"static/js/47.039ed9f6.chunk.js","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from \"react\";\nimport { parseLengthAndUnit } from \"./helpers/unitConverter\";\nimport { createAnimation } from \"./helpers/animation\";\nvar rotate = createAnimation(\"ClockLoader\", \"100% { transform: rotate(360deg) }\", \"rotate\");\nfunction ClockLoader(_a) {\n    var _b = _a.loading, loading = _b === void 0 ? true : _b, _c = _a.color, color = _c === void 0 ? \"#000000\" : _c, _d = _a.speedMultiplier, speedMultiplier = _d === void 0 ? 1 : _d, _e = _a.cssOverride, cssOverride = _e === void 0 ? {} : _e, _f = _a.size, size = _f === void 0 ? 50 : _f, additionalprops = __rest(_a, [\"loading\", \"color\", \"speedMultiplier\", \"cssOverride\", \"size\"]);\n    var _g = parseLengthAndUnit(size), value = _g.value, unit = _g.unit;\n    var wrapper = __assign({ display: \"inherit\", position: \"relative\", width: \"\".concat(value).concat(unit), height: \"\".concat(value).concat(unit), backgroundColor: \"transparent\", boxShadow: \"inset 0px 0px 0px 2px \".concat(color), borderRadius: \"50%\" }, cssOverride);\n    var minute = {\n        position: \"absolute\",\n        backgroundColor: color,\n        width: \"\".concat(value / 3, \"px\"),\n        height: \"2px\",\n        top: \"\".concat(value / 2 - 1, \"px\"),\n        left: \"\".concat(value / 2 - 1, \"px\"),\n        transformOrigin: \"1px 1px\",\n        animation: \"\".concat(rotate, \" \").concat(8 / speedMultiplier, \"s linear infinite\"),\n    };\n    var hour = {\n        position: \"absolute\",\n        backgroundColor: color,\n        width: \"\".concat(value / 2.4, \"px\"),\n        height: \"2px\",\n        top: \"\".concat(value / 2 - 1, \"px\"),\n        left: \"\".concat(value / 2 - 1, \"px\"),\n        transformOrigin: \"1px 1px\",\n        animation: \"\".concat(rotate, \" \").concat(2 / speedMultiplier, \"s linear infinite\"),\n    };\n    if (!loading) {\n        return null;\n    }\n    return (React.createElement(\"span\", __assign({ style: wrapper }, additionalprops),\n        React.createElement(\"span\", { style: hour }),\n        React.createElement(\"span\", { style: minute })));\n}\nexport default ClockLoader;\n","import React, { useEffect, useState } from 'react';\r\nimport '../teacher/card.css';\r\nimport Grid from '@mui/material/Grid';\r\nimport Box from '@mui/material/Box';\r\nimport './student.css';\r\nimport { requesicoes } from '../../../utils/services';\r\nimport { Alert, AlertTitle, Button, Card, CardActions, CardContent, MenuItem, TextField, Typography } from '@mui/material';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper'\r\nimport { ClipLoader, ClockLoader } from 'react-spinners';\r\nimport authService from '../../../utils/services/auth';\r\n\r\n\r\nlet listaMatricula = [];\r\nlet anosMatricula = [];\r\nlet avaliacoes = [];\r\nlet tiposAvaliacaoOrdenados = []\r\nlet currentUser=null\r\nlet estudante ={}\r\n\r\n\r\nconst card = (\r\n    <React.Fragment>\r\n        <CardContent>\r\n            <Typography sx={{ fontSize: 14 }} variant=\"h2\" color=\"text.primary\" gutterBottom>\r\n                Notas de Exame\r\n            </Typography>\r\n        </CardContent>\r\n    </React.Fragment>\r\n);\r\n\r\nlet matriculaEstudante = []\r\nlet tiposAvaliacaoOrdemUnicos = []\r\nconst CardConsulta = (props) => {\r\n\r\n\r\n    const [anoSelecionado, setAnoSelecionado] = useState(\"\");\r\n    const [updateDom, setUpdateDom] = useState(false);\r\n    const [carregando, setCarregando] = useState(true);\r\n    const [mostrarMensagem, setMostrarMensagem] = useState(false);\r\n\r\n\r\n    const [cadeirasMatriculdas, setCadeirasMatriculdas] = useState([]); // Use o estado para armazenar as cadeiras da matrícula\r\n\r\n    useEffect(() => {\r\n        currentUser = authService.getCurrentUser();\r\n        usuarioLagado();\r\n        setTimeout(() => {\r\n            setCarregando(false);\r\n        }, 2000);\r\n    }, [])\r\n\r\n    async function usuarioLagado() {\r\n        estudante = await requesicoes().getEstudanteByNumero(currentUser.sub, '?campos=id,nome,apelido')\r\n        //getUsuarioLogado( currentUser.sub, '?campos=id,nome,apelido');\r\n        init()\r\n        setUpdateDom(!updateDom);\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        // Inicie um timeout de 5 segundos para mostrar o aviso\r\n        const timeoutID = setTimeout(() => {\r\n            setMostrarMensagem(true);\r\n        }, 5000);\r\n\r\n        // Lembre-se de limpar o timeout quando o componente for desmontado\r\n        return () => clearTimeout(timeoutID);\r\n    }, []);\r\n    async function init() {\r\n        setCarregando(true);\r\n        // listaEstudantes = await Promise.resolve(requesicoes().buscarEstudantes(`/${idEstudante}?campos=nome,id,apelido,matricula`));\r\n        listaMatricula = await Promise.resolve(requesicoes().getMatriculaByEstudante(`/${estudante?.data.id}`));\r\n\r\n        listaMatricula.data.forEach((matricula) => {\r\n            const dataMatricula = matricula.dataMatricula;\r\n            const anoMatricula = new Date(dataMatricula).getFullYear();\r\n\r\n            // Adicionar o ano à lista se ainda não estiver presente\r\n            if (!anosMatricula.includes(anoMatricula)) {\r\n                anosMatricula.push(anoMatricula);\r\n            }\r\n        });\r\n\r\n        setUpdateDom(!updateDom);\r\n        setCarregando(false);\r\n\r\n    }\r\n\r\n\r\n    function handleChange(event) {\r\n        setAnoSelecionado(event.target.value);\r\n\r\n    }\r\n    async function handleSearch() {\r\n\r\n        if (!anoSelecionado) {\r\n\r\n        } else {\r\n            avaliacoes = await Promise.resolve(requesicoes().getTeste(`/${estudante?.data.id}?campos=id,nota,cadeira.id,cadeira.nome,avaliacao.id,avaliacao.tipoAvaliacao,avaliacao.ordem,estudante.id,estudante.nome,estudante.apelido,estudante.matricula.dataMatricula,estudante.nome,estudante.apelido,estudante.matricula.cadeiras.id,estudante.matricula.cadeiras.nome`))//,  ,,estudante.curso,cadeira\r\n            // Obter tipos únicos de avaliação e suas ordens do array de avaliações\r\n            tiposAvaliacaoOrdemUnicos = Array.from(new Set(avaliacoes.data.map(avaliacao => `${avaliacao.avaliacao.tipoAvaliacao}${avaliacao.avaliacao.ordem !== null ? '-' + avaliacao.avaliacao.ordem : ''}`)));\r\n\r\n            // Separe os tipos de avaliação em \"Teste\" e \"Trabalho\"\r\n            const tiposTeste = tiposAvaliacaoOrdemUnicos.filter(tipo => tipo.startsWith(\"Teste\"));\r\n            const tiposTrabalho = tiposAvaliacaoOrdemUnicos.filter(tipo => tipo.startsWith(\"Trab\"));\r\n            // tiposAvaliacaoOrdenados = [...tiposTeste, ...tiposTrabalho];\r\n            setCadeirasMatriculdas(Array.from(new Set(listaMatricula.data.flatMap((m => m.cadeiras.map((cadeira) => cadeira.nome))))))\r\n\r\n            // setCadeirasMatriculdas(Array.from(new Set(avaliacoes.data.flatMap((row) => row.estudante.matricula[0].cadeiras.map((cadeira) => cadeira.nome)))))\r\n            setUpdateDom(!updateDom);\r\n\r\n\r\n        }\r\n    }\r\n    const calcularMediaExame = (frequenciaEstudante, notaExame, notaRecorrencia) => {\r\n        const notaExameFloat = parseFloat(notaExame);\r\n        const notaRecorrenciaFloat = parseFloat(notaRecorrencia);\r\n\r\n        if (!isNaN(notaExameFloat) && isNaN(notaRecorrenciaFloat)) {\r\n\r\n            if (notaExameFloat < 8) {\r\n                if (notaRecorrenciaFloat) {\r\n                    return ((parseFloat(frequenciaEstudante) * 0.6 + 0.4 * notaRecorrenciaFloat)).toFixed(0);\r\n                }\r\n\r\n                return (notaExameFloat)\r\n            }\r\n\r\n            return ((parseFloat(frequenciaEstudante) * 0.6 + 0.4 * notaExameFloat)).toFixed(0);\r\n        }\r\n\r\n        if (!isNaN(notaRecorrenciaFloat)) {\r\n\r\n            return ((parseFloat(frequenciaEstudante) * 0.6 + 0.4 * notaRecorrenciaFloat)).toFixed(0);\r\n        }\r\n\r\n        return \"\";\r\n    };\r\n\r\n    const calculateMedia = (notas) => {\r\n        const notasArray = Object.values(notas);\r\n        const notasValidas = notasArray.filter((nota) => nota !== \"\" && nota !== null && !isNaN(parseFloat(nota)));\r\n\r\n        if (notasValidas.length >= 3) {\r\n            const sum = notasValidas.reduce((acc, nota) => acc + parseFloat(nota), 0);\r\n            return (sum / notasValidas.length).toFixed(2);\r\n        }\r\n\r\n        return \"\";\r\n    };\r\n\r\n    if (carregando)\r\n        return (<div>\r\n            {!mostrarMensagem ? (\r\n                <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\r\n                    <ClockLoader color=\"#36D7B7\" loading={true} size={35} /></div>\r\n            ) : (\r\n                <Alert severity=\"warning\">\r\n                    <AlertTitle>Tempo de Espera Excedido</AlertTitle>\r\n                    Deveria mostrar alguma informação. Por favor, avise o <strong>CIAM</strong> sobre este problema.\r\n                </Alert>\r\n\r\n            )}\r\n        </div>)\r\n    return (\r\n        <Box sx={{ minWidth: 275 }}>\r\n            <Card variant=\"outlined\">\r\n                {card}\r\n                <Grid container spacing={2} >\r\n                    <Grid item xs={12} sm={4} className='selectComponet'>\r\n                        <TextField className='inputSelect'\r\n                            type=\"text\" variant=\"outlined\" name=\"turma\"\r\n                            // error={(errors.turma && touched.turma)}\r\n                            // helperText={errors.turma}\r\n                            onChange={handleChange}\r\n                            select\r\n                            // value={values.turma} \r\n                            margin=\"dense\"\r\n                            id=\"turma\" fullWidth label=\"-- Seleciona Ano Lectivo --\">\r\n                            {anosMatricula.map(opt => <MenuItem value={opt} key={opt}>{'Ano Lectivo de ' + opt}</MenuItem>)}\r\n                        </TextField>\r\n                        <Button variant=\"contained\" className='btnBuscar' onClick={handleSearch}>Buscar</Button>\r\n\r\n                    </Grid>\r\n                </Grid>\r\n                {/* Renderize o Alert quando estiver aberto */}\r\n                {/* <Alert severity=\"error\" sx={{ marginTop: 2 }} open={alertOpen} onClose={() => setAlertOpen(false)}>\r\n                    Por favor, selecione um ano antes de buscar.\r\n                </Alert> */}\r\n            </Card>\r\n            {\r\n                cadeirasMatriculdas.length > 0 &&\r\n\r\n                (<Card variant=\"outlined\" style={{ marginTop: '2%' }}>\r\n                    <TableContainer component={Paper}>\r\n                        <Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>Disciplina</TableCell>\r\n                                    <TableCell align=\"right\">Ano</TableCell>\r\n                                    <TableCell align=\"right\">Freq</TableCell>\r\n                                    <TableCell align=\"right\">Observação</TableCell>\r\n                                    <TableCell align=\"right\">Exame Normal</TableCell>\r\n                                    <TableCell align=\"right\">Exame de Recorrência </TableCell>\r\n                                    <TableCell align=\"center\">M. Final</TableCell>\r\n                                    <TableCell align=\"center\">R. Final</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {cadeirasMatriculdas.map((cadeira, index) => {\r\n                                    const notasDisciplina = {}; // Armazena as notas da disciplina\r\n\r\n                                    const matriculaEstudante = listaMatricula.data.find(matricula => matricula.cadeiras.some(cadeiraMat => cadeiraMat.nome === cadeira));\r\n                                    tiposAvaliacaoOrdemUnicos.forEach((tipoAvaliacaoOrdem) => {\r\n                                        const [tipoAvaliacao, ordem] = tipoAvaliacaoOrdem.split('-');\r\n                                        const avaliacao = avaliacoes.data.find(avaliacao =>\r\n                                            avaliacao.avaliacao.tipoAvaliacao === tipoAvaliacao &&\r\n                                            (avaliacao.avaliacao.ordem === parseInt(ordem) || avaliacao.avaliacao.ordem === null) &&\r\n                                            avaliacao.cadeira.nome === cadeira\r\n                                        );\r\n\r\n                                        if (avaliacao) {\r\n                                            notasDisciplina[tipoAvaliacaoOrdem] = avaliacao.nota;\r\n                                        } else {\r\n                                            notasDisciplina[tipoAvaliacaoOrdem] = null;\r\n                                        }\r\n\r\n                                    });\r\n\r\n                                    return (\r\n                                        <TableRow key={index}>\r\n                                            <TableCell>\r\n                                                {cadeira}\r\n                                            </TableCell>\r\n                                            {/* Preencha a coluna \"Ano\" com o valor de anoFrequencia da matrícula */}\r\n                                            <TableCell align=\"right\">\r\n                                                {matriculaEstudante ? matriculaEstudante.anoFrequencia === 'Primeiro' ? '1' : matriculaEstudante.anoFrequencia === 'Segundo' ? '2' : matriculaEstudante.anoFrequencia === 'Terceiro' ? '3' : matriculaEstudante.anoFrequencia === 'Quarto' ? '4' : '5' : ''}\r\n                                            </TableCell>\r\n                                            <TableCell align=\"right\">\r\n                                                {calculateMedia(\r\n                                                    tiposAvaliacaoOrdemUnicos\r\n                                                        .filter(tipoAvaliacaoOrdem => tipoAvaliacaoOrdem.startsWith('Teste') || tipoAvaliacaoOrdem.startsWith('Trab'))\r\n                                                        .map(tipoAvaliacaoOrdem => notasDisciplina[tipoAvaliacaoOrdem])\r\n\r\n                                                )}\r\n                                            </TableCell>\r\n                                            <TableCell align=\"right\" style={{\r\n                                                color: calculateMedia(\r\n                                                    tiposAvaliacaoOrdemUnicos\r\n                                                        .filter(tipoAvaliacaoOrdem => tipoAvaliacaoOrdem.startsWith('Teste') || tipoAvaliacaoOrdem.startsWith('Trab'))\r\n                                                        .map(tipoAvaliacaoOrdem => notasDisciplina[tipoAvaliacaoOrdem])\r\n\r\n                                                    // tiposAvaliacaoOrdemUnicos.map(tipoAvaliacaoOrdem => notasDisciplina[tipoAvaliacaoOrdem])\r\n                                                ) < 9.5 ? 'red' : calculateMedia(\r\n                                                    tiposAvaliacaoOrdemUnicos\r\n                                                        .filter(tipoAvaliacaoOrdem => tipoAvaliacaoOrdem.startsWith('Teste') || tipoAvaliacaoOrdem.startsWith('Trab'))\r\n                                                        .map(tipoAvaliacaoOrdem => notasDisciplina[tipoAvaliacaoOrdem])\r\n\r\n                                                    // tiposAvaliacaoOrdemUnicos.map(tipoAvaliacaoOrdem => notasDisciplina[tipoAvaliacaoOrdem])\r\n                                                ) >= 13.5 ? '#3CB371' : ''\r\n                                            }}>\r\n\r\n                                                {\r\n                                                    calculateMedia(\r\n                                                        tiposAvaliacaoOrdemUnicos\r\n                                                            .filter(tipoAvaliacaoOrdem => tipoAvaliacaoOrdem.startsWith('Teste') || tipoAvaliacaoOrdem.startsWith('Trab'))\r\n                                                            .map(tipoAvaliacaoOrdem => notasDisciplina[tipoAvaliacaoOrdem])\r\n\r\n                                                        //tiposAvaliacaoOrdemUnicos.map(tipoAvaliacaoOrdem => notasDisciplina[tipoAvaliacaoOrdem])\r\n                                                    ) !== '' ?\r\n                                                        calculateMedia(\r\n                                                            tiposAvaliacaoOrdemUnicos\r\n                                                                .filter(tipoAvaliacaoOrdem => tipoAvaliacaoOrdem.startsWith('Teste') || tipoAvaliacaoOrdem.startsWith('Trab'))\r\n                                                                .map(tipoAvaliacaoOrdem => notasDisciplina[tipoAvaliacaoOrdem])\r\n\r\n                                                            // tiposAvaliacaoOrdemUnicos.map(tipoAvaliacaoOrdem => notasDisciplina[tipoAvaliacaoOrdem])\r\n                                                        ) < 9.5 ? 'Excluido' : calculateMedia(\r\n                                                            tiposAvaliacaoOrdemUnicos\r\n                                                                .filter(tipoAvaliacaoOrdem => tipoAvaliacaoOrdem.startsWith('Teste') || tipoAvaliacaoOrdem.startsWith('Trab'))\r\n                                                                .map(tipoAvaliacaoOrdem => notasDisciplina[tipoAvaliacaoOrdem])\r\n\r\n                                                            //tiposAvaliacaoOrdemUnicos.map(tipoAvaliacaoOrdem => notasDisciplina[tipoAvaliacaoOrdem])\r\n                                                        ) >= 13.5 ? 'Dispensado' : 'Admitido' : ''\r\n                                                }\r\n                                            </TableCell>\r\n                                            <TableCell align=\"center\">\r\n                                                {notasDisciplina['Exame']}\r\n                                            </TableCell>\r\n                                            <TableCell align=\"center\">\r\n                                                {notasDisciplina['Rec']}\r\n                                            </TableCell>\r\n                                            <TableCell align=\"center\">\r\n                                                {notasDisciplina['Exame'] && !notasDisciplina['Rec'] ? notasDisciplina['Exame'] >= 10 ? notasDisciplina['Exame'] : '' : notasDisciplina['Exame'] && notasDisciplina['Rec'] ?\r\n                                                    calcularMediaExame(calculateMedia(\r\n                                                        tiposAvaliacaoOrdemUnicos.map(tipoAvaliacaoOrdem => notasDisciplina[tipoAvaliacaoOrdem])\r\n                                                    ), notasDisciplina['Exame'] = undefined, notasDisciplina['Rec']) >= 10 ? calcularMediaExame(calculateMedia(\r\n                                                        tiposAvaliacaoOrdemUnicos.map(tipoAvaliacaoOrdem => notasDisciplina[tipoAvaliacaoOrdem])\r\n                                                    ), notasDisciplina['Exame'], notasDisciplina['Rec']) : calcularMediaExame(calculateMedia(\r\n                                                        tiposAvaliacaoOrdemUnicos.map(tipoAvaliacaoOrdem => notasDisciplina[tipoAvaliacaoOrdem])\r\n                                                    ), notasDisciplina['Exame'], notasDisciplina['Rec']) : ''}\r\n\r\n                                            </TableCell>\r\n                                            <TableCell align=\"center\" >\r\n                                                {\r\n                                                    notasDisciplina['Exame'] && !notasDisciplina['Rec'] ? calcularMediaExame(calculateMedia(\r\n                                                        tiposAvaliacaoOrdemUnicos.map(tipoAvaliacaoOrdem => notasDisciplina[tipoAvaliacaoOrdem])\r\n                                                    ), notasDisciplina['Exame'], notasDisciplina['Rec']) >= 10 ? 'Aprovado' : notasDisciplina['Exame'] && notasDisciplina['Rec'] && notasDisciplina['Rec'] ?\r\n                                                        'Tem nota de Recorrencia' : 'Recorrência' : notasDisciplina['Rec'] && notasDisciplina['Rec'] ? calcularMediaExame(calculateMedia(\r\n                                                            tiposAvaliacaoOrdemUnicos.map(tipoAvaliacaoOrdem => notasDisciplina[tipoAvaliacaoOrdem])\r\n                                                        ), notasDisciplina['Exame'], notasDisciplina['Rec']) >= 10 ? 'Aprovado' : 'Reprovado' : ''\r\n                                                    //    && notasDisciplina['Exame'] >=10 ? 'Aprovado':'Recorrencia'||'????'\r\n                                                }\r\n                                            </TableCell>\r\n\r\n                                        </TableRow>\r\n                                    );\r\n                                })}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Card>)\r\n            }\r\n        </Box>\r\n\r\n\r\n\r\n    )\r\n}\r\nexport default CardConsulta"],"sourceRoot":""}