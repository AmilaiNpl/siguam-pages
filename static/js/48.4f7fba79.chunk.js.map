{"version":3,"sources":["views/forms/student/frequencia.js"],"names":["listaMatricula","anosMatricula","avaliacoes","avaliacoesSemExames","currentUser","estudante","tiposAvaliacaoOrdenados","card","Fragment","sx","fontSize","variant","color","gutterBottom","tiposAvaliacaoOrdemUnicos","CardConsulta","props","useState","anoSelecionado","setAnoSelecionado","updateDom","setUpdateDom","cadeirasMatriculdas","setCadeirasMatriculdas","mostrarMensagem","setMostrarMensagem","carregando","setCarregando","a","requesicoes","getEstudanteByNumero","sub","init","Promise","resolve","getMatriculaByEstudante","data","id","forEach","matricula","dataMatricula","anoMatricula","Date","getFullYear","includes","push","getTeste","filter","avaliacao","tipoAvaliacao","length","Array","from","Set","map","ordem","cadeirasMatricula","m","cadeiras","console","log","tiposTeste","tipo","startsWith","tiposTrabalho","flatMap","cadeira","useEffect","authService","getCurrentUser","usuarioLagado","timeoutID","setTimeout","clearTimeout","calculateMedia","notas","notasValidas","Object","values","nota","isNaN","parseFloat","reduce","acc","toFixed","severity","minWidth","container","spacing","item","xs","sm","className","type","name","onChange","event","target","value","select","margin","fullWidth","label","opt","onClick","style","marginTop","component","Paper","size","aria-label","align","tipoAvaliacaoOrdem","index","split","nome","notasDisciplina","matriculaEstudante","find","some","cadeiraMat","parseInt","codigo","anoFrequencia"],"mappings":"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","file":"static/js/48.4f7fba79.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport '../teacher/card.css';\r\nimport Grid from '@mui/material/Grid';\r\nimport Box from '@mui/material/Box';\r\nimport './student.css';\r\nimport { requesicoes } from '../../../utils/services';\r\nimport { Alert, AlertTitle, Button, Card, CardActions, CardContent, MenuItem, TextField, Typography } from '@mui/material';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper'\r\nimport { style } from '@mui/system';\r\nimport authService from '../../../utils/services/auth';\r\n\r\nlet listaMatricula = [];\r\nlet anosMatricula = [];\r\nlet avaliacoes = [];\r\nlet avaliacoesSemExames = []\r\nlet currentUser=null\r\nlet estudante ={}\r\nlet tiposAvaliacaoOrdenados = []\r\n\r\n\r\nconst card = (\r\n    <React.Fragment>\r\n        <CardContent>\r\n            <Typography sx={{ fontSize: 14 }} variant=\"h2\" color=\"text.primary\" gutterBottom>\r\n                Notas de Frequência\r\n            </Typography>\r\n        </CardContent>\r\n    </React.Fragment>\r\n);\r\n\r\n\r\nlet matriculaEstudante = []\r\nlet tiposAvaliacaoOrdemUnicos = []\r\nconst CardConsulta = (props) => {\r\n\r\n\r\n    const [anoSelecionado, setAnoSelecionado] = useState(\"\");\r\n    const [updateDom, setUpdateDom] = useState(false);\r\n    const [alertOpen, setAlertOpen] = useState(false);\r\n    const [cadeirasMatriculdas, setCadeirasMatriculdas] = useState([]); // Use o estado para armazenar as cadeiras da matrícula\r\n    const [mostrarMensagem, setMostrarMensagem] = useState(false);\r\n    const [carregando, setCarregando] = useState(true);\r\n\r\n    useEffect(() => {\r\n        currentUser = authService.getCurrentUser();\r\n        setUpdateDom(!updateDom);\r\n        usuarioLagado();\r\n    }, [])\r\n\r\n   \r\n    useEffect(() => {\r\n        // Inicie um timeout de 5 segundos para mostrar o aviso\r\n        const timeoutID = setTimeout(() => {\r\n            setMostrarMensagem(true);\r\n        }, 5000);\r\n\r\n        return () => clearTimeout(timeoutID);\r\n    }, []);\r\n\r\n    async function usuarioLagado() {\r\n        estudante = await requesicoes().getEstudanteByNumero(currentUser.sub, '?campos=id,nome,apelido')\r\n        init()\r\n        setUpdateDom(!updateDom);\r\n\r\n    }\r\n    async function init() {\r\n        listaMatricula = await Promise.resolve(requesicoes().getMatriculaByEstudante(`/${estudante?.data.id}`));\r\n        listaMatricula.data.forEach((matricula) => {\r\n            const dataMatricula = matricula.dataMatricula;\r\n            const anoMatricula = new Date(dataMatricula).getFullYear();\r\n            // Adicionar o ano à lista se ainda não estiver presente\r\n            if (!anosMatricula.includes(anoMatricula)) {\r\n                anosMatricula.push(anoMatricula);\r\n            }\r\n        });\r\n\r\n        setUpdateDom(!updateDom);\r\n        setCarregando(false);\r\n\r\n    }\r\n\r\n    function handleChange(event) {\r\n        setAnoSelecionado(event.target.value);\r\n\r\n    }\r\n    async function handleSearch() {\r\n\r\n        if (!anoSelecionado) {\r\n\r\n        } else {\r\n            avaliacoes = await Promise.resolve(requesicoes().getTeste(`/${estudante.data.id}?campos=id,nota,cadeira.id,cadeira.nome,avaliacao.id,avaliacao.tipoAvaliacao,avaliacao.ordem,estudante.id,estudante.nome,estudante.apelido,estudante.nome,estudante.apelido`))//,  ,,estudante.curso,cadeira\r\n            avaliacoesSemExames = avaliacoes.data.filter(avaliacao => avaliacao.avaliacao.tipoAvaliacao !== 'Exame' && avaliacao.avaliacao.tipoAvaliacao !== 'Rec')\r\n\r\n            if (avaliacoes.data.length === 0) {\r\n                avaliacoes = [{ \"avaliacao\": { \"id\": 260, \"tipoAvaliacao\": \"Teste\", \"ordem\": 1 } }, { \"avaliacao\": { \"id\": 260, \"tipoAvaliacao\": \"Teste\", \"ordem\": 2 } },\r\n                { \"avaliacao\": { \"id\": 260, \"tipoAvaliacao\": \"Trab\", \"ordem\": 1 } }, { \"avaliacao\": { \"id\": 260, \"tipoAvaliacao\": \"Trab\", \"ordem\": 2 } }]\r\n\r\n                tiposAvaliacaoOrdemUnicos = Array.from(new Set(avaliacoes.map(avaliacao => `${avaliacao.avaliacao.tipoAvaliacao}-${avaliacao.avaliacao.ordem}`)));\r\n                const cadeirasMatricula = listaMatricula.data.map(m => m.cadeiras);\r\n                console.log('cadeirasMatricula',cadeirasMatricula);\r\n                // listaEstudantes.data.matricula[0].\r\n                tiposAvaliacaoOrdenados = tiposAvaliacaoOrdemUnicos.length > 0 ? tiposAvaliacaoOrdemUnicos : [\"Teste-1\", \"Teste-2\", \"Trabalho-1\", \"Trabalho-2\"];\r\n                setCadeirasMatriculdas(...cadeirasMatricula);\r\n            } else {\r\n\r\n                // Obter tipos únicos de avaliação e suas ordens do array de avaliações\r\n                tiposAvaliacaoOrdemUnicos = Array.from(new Set(avaliacoesSemExames.map(avaliacao => `${avaliacao.avaliacao.tipoAvaliacao}-${avaliacao.avaliacao.ordem}`)));\r\n                // Separe os tipos de avaliação em \"Teste\" e \"Trabalho\"\r\n                const tiposTeste = tiposAvaliacaoOrdemUnicos.filter(tipo => tipo.startsWith(\"Teste\"));\r\n                const tiposTrabalho = tiposAvaliacaoOrdemUnicos.filter(tipo => tipo.startsWith(\"Trab\"));\r\n                tiposAvaliacaoOrdenados = [...tiposTeste, ...tiposTrabalho];\r\n                setCadeirasMatriculdas(Array.from(new Set(listaMatricula.data.flatMap((m => m.cadeiras.map((cadeira) => cadeira))))))\r\n                setUpdateDom(!updateDom);\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    const calculateMedia = (notas) => {\r\n        const notasArray = Object.values(notas);\r\n        const notasValidas = notasArray.filter((nota) => nota !== \"\" && nota !== null && !isNaN(parseFloat(nota)));\r\n\r\n        if (notasValidas.length >= 3) {\r\n            const sum = notasValidas.reduce((acc, nota) => acc + parseFloat(nota), 0);\r\n            return (sum / notasValidas.length).toFixed(2);\r\n        }\r\n\r\n        return \"\";\r\n    };\r\n\r\n    if (carregando)\r\n        return (<div>\r\n            {!mostrarMensagem ? (\r\n                <div>Processando!</div>\r\n            ) : (\r\n                <Alert severity=\"warning\">\r\n                    <AlertTitle>Tempo de Espera Excedido</AlertTitle>\r\n                    Deveria mostrar alguma informação. Por favor, avise o <strong>CIAM</strong> sobre este problema.\r\n                </Alert>\r\n\r\n            )}\r\n        </div>)\r\n    return (\r\n        <Box sx={{ minWidth: 275 }}>\r\n            <Card variant=\"outlined\">\r\n                {card}\r\n                <Grid container spacing={2} >\r\n                    <Grid item xs={12} sm={4} className='selectComponet'>\r\n                        <TextField className='inputSelect'\r\n                            type=\"text\" variant=\"outlined\" name=\"turma\"\r\n                            // error={(errors.turma && touched.turma)}\r\n                            // helperText={errors.turma}\r\n                            onChange={handleChange}\r\n                            select\r\n                            // value={values.turma} \r\n                            margin=\"dense\"\r\n                            id=\"turma\" fullWidth label=\"-- Seleciona Ano Lectivo --\">\r\n                            {anosMatricula.map(opt => <MenuItem value={opt} key={opt}>{'Ano Lectivo de ' + opt}</MenuItem>)}\r\n                        </TextField>\r\n                        <Button variant=\"contained\" className='btnBuscar' onClick={handleSearch}>Buscar</Button>\r\n\r\n                    </Grid>\r\n                </Grid>\r\n                {/* Renderize o Alert quando estiver aberto */}\r\n                {/* <Alert severity=\"error\" sx={{ marginTop: 2 }} open={alertOpen} onClose={() => setAlertOpen(false)}>\r\n                    Por favor, selecione um ano antes de buscar.\r\n                </Alert> */}\r\n            </Card>\r\n            {\r\n                cadeirasMatriculdas.length > 0 &&\r\n                (<Card variant=\"outlined\" style={{ marginTop: '2%' }}>\r\n                    <TableContainer component={Paper}>\r\n                        <Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>##</TableCell>\r\n                                    <TableCell>Codigo</TableCell>\r\n                                    <TableCell>Disciplina</TableCell>\r\n                                    <TableCell align=\"right\">Ano</TableCell>\r\n                                    {tiposAvaliacaoOrdenados.map((tipoAvaliacaoOrdem, index) => {\r\n                                        const [tipoAvaliacao, ordem] = tipoAvaliacaoOrdem.split('-');\r\n                                        return (\r\n                                            <TableCell align=\"center\" key={index}>\r\n                                                {tipoAvaliacao} - {ordem}\r\n                                            </TableCell>\r\n                                        );\r\n                                    })}\r\n                                    <TableCell align=\"right\">Frequência</TableCell>\r\n                                    <TableCell align=\"right\">Observação</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {cadeirasMatriculdas.map((cadeira, index) => {\r\n                                    console.log('Cadeiras aqui-1: ',cadeira);\r\n                                    console.log('Cadeiras aqui: ',cadeira.nome);\r\n                                    const notasDisciplina = {}; // Armazena as notas da disciplina\r\n\r\n                                    // Encontre o objeto de matrícula da disciplina atual\r\n                                    // const estudante = listaMatricula.data.listaMatricula.data.map(m=>m.estudante); // Obtenha o primeiro estudante (se houver)\r\n                                    const matriculaEstudante = listaMatricula.data.find(matricula => matricula.cadeiras.some(cadeiraMat => cadeiraMat.nome === cadeira.nome));\r\n\r\n                                    // Preenche notasDisciplina com as notas da disciplina atual\r\n                                    tiposAvaliacaoOrdemUnicos.forEach((tipoAvaliacaoOrdem) => {\r\n                                        const [tipoAvaliacao, ordem] = tipoAvaliacaoOrdem.split('-');\r\n                                        const avaliacao = avaliacoesSemExames?.find(avaliacao => avaliacao.avaliacao.tipoAvaliacao === tipoAvaliacao && avaliacao.avaliacao.ordem === parseInt(ordem) && avaliacao.cadeira.nome === cadeira.nome);\r\n\r\n                                        if (avaliacao && avaliacao.avaliacao.ordem !== null) {\r\n                                            notasDisciplina[tipoAvaliacaoOrdem] = avaliacao.nota;\r\n                                        } else {\r\n                                            notasDisciplina[tipoAvaliacaoOrdem] = null;\r\n                                        }\r\n                                    });\r\n\r\n                                    return (\r\n                                        <TableRow key={index}>\r\n                                            <TableCell>\r\n                                                {index + 1}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                {cadeira.codigo}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                {cadeira.nome}\r\n                                            </TableCell>\r\n                                            {/* Preencha a coluna \"Ano\" com o valor de anoFrequencia da matrícula */}\r\n                                            <TableCell align=\"right\">\r\n                                                {matriculaEstudante ? matriculaEstudante.anoFrequencia === 'Primeiro' ? '1' : matriculaEstudante.anoFrequencia === 'Segundo' ? '2' : matriculaEstudante.anoFrequencia === 'Terceiro' ? '3' : matriculaEstudante.anoFrequencia === 'Quarto' ? '4' : '5' : ''}\r\n                                            </TableCell>\r\n                                            {/* Adicione outras células com os valores apropriados, como notas, conforme necessário */}\r\n                                            {tiposAvaliacaoOrdemUnicos.map((tipoAvaliacaoOrdem, index) => (\r\n                                                <TableCell key={index} align='center' style={{ color: notasDisciplina[tipoAvaliacaoOrdem] <= 9.5 ? 'red' : 'inherit' }}>\r\n                                                    {notasDisciplina[tipoAvaliacaoOrdem]}\r\n                                                </TableCell>\r\n                                            ))}\r\n                                            <TableCell align=\"right\">\r\n                                                {calculateMedia(\r\n                                                    tiposAvaliacaoOrdemUnicos.map(tipoAvaliacaoOrdem => notasDisciplina[tipoAvaliacaoOrdem])\r\n\r\n                                                )}\r\n                                            </TableCell>\r\n                                            <TableCell align=\"right\" style={{\r\n                                                color: calculateMedia(\r\n                                                    tiposAvaliacaoOrdemUnicos.map(tipoAvaliacaoOrdem => notasDisciplina[tipoAvaliacaoOrdem])\r\n                                                ) < 9.5 ? 'red' : calculateMedia(\r\n                                                    tiposAvaliacaoOrdemUnicos.map(tipoAvaliacaoOrdem => notasDisciplina[tipoAvaliacaoOrdem])\r\n                                                ) >= 13.5 ? '#3CB371' : ''\r\n                                            }}>\r\n\r\n                                                {\r\n                                                    calculateMedia(\r\n                                                        tiposAvaliacaoOrdemUnicos.map(tipoAvaliacaoOrdem => notasDisciplina[tipoAvaliacaoOrdem])\r\n                                                    ) !== '' ?\r\n                                                        calculateMedia(\r\n                                                            tiposAvaliacaoOrdemUnicos.map(tipoAvaliacaoOrdem => notasDisciplina[tipoAvaliacaoOrdem])\r\n                                                        ) < 9.5 ? 'Excluido' : calculateMedia(\r\n                                                            tiposAvaliacaoOrdemUnicos.map(tipoAvaliacaoOrdem => notasDisciplina[tipoAvaliacaoOrdem])\r\n                                                        ) >= 13.5 ? 'Dispensado' : 'Admitido' : ''\r\n                                                }\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    );\r\n                                })}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Card>)\r\n            }\r\n        </Box>\r\n\r\n\r\n\r\n    )\r\n}\r\nexport default CardConsulta"],"sourceRoot":""}