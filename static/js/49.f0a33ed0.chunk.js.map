{"version":3,"sources":["views/forms/class/class_edit.js","ui-component/shared/Input/index.js","../node_modules/@material-ui/icons/Save.js"],"names":["useStyles","makeStyles","theme","root","backgroundColor","sexos","documentos","provincias","nacionalidades","distritos","cidades","cursos","provinciasde","estudante","NovoEstudante","classes","useState","initialValues","setInitialValues","updateDOM","setUpdateDOM","setProvincia","Date","setSelectedDateNasc","setSelectedDateEmissao","isLoadingData","setIsLoadingData","setRedirect","setTo","React","setOpen","handleClose","event","reason","Fragment","useEffect","init","a","id","window","location","href","split","length","console","log","Promise","all","requesicoes","getestudanteById","buscarSexo","buscarDocumentoEst","buscarCurso","buscarPaises","buscarProvincia","buscarCidades","requestEstudante","requestSexo","tiposDocumentos","listaCurso","listaPaises","listaprovincias","listaCidades","data","v","filter","p","country_id","d","regiaoPai","validationSchema","Yup","shape","apelido","min","required","nome","sexo","oneOf","pai","mae","className","elevation","style","padding","width","margin","align","variant","onSubmit","values","setSubmitting","JSON","stringify","resolve","putEstudantes","Swal","fire","response","status","icon","title","text","map","m","i","mensagemUsuario","message","save","setTimeout","props","setFieldValue","touched","errors","dirty","isSubmitting","handleChange","handleBlur","handleSubmit","handleReset","container","spacing","item","xs","sm","name","label","placeholder","helperText","fullWidth","error","component","gutterBottom","row","aria-label","value","onChange","e","target","opt","control","dateAdapter","AdapterDateFns","format","dataNascimento","KeyboardButtonProps","renderInput","params","buscarProvincias","nacionalidade","getOptionLabel","option","options","minWidth","naturalidade","InputLabelProps","shrink","cidade","tipoDocumento","dataEmissao","curso","color","type","size","button","startIcon","inputLabel","fontSize","Input","as","TextField","_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","default","_createSvgIcon","_jsxRuntime","_default","jsx"],"mappings":"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","file":"static/js/49.f0a33ed0.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { makeStyles, } from '@material-ui/core/styles';\r\n\r\nimport * as Yup from 'yup'\r\n//import './student.css'\r\nimport Container from '@material-ui/core/Container';\r\nimport {\r\n    Grid, Paper, TextField,\r\n    FormControlLabel, Button,\r\n    Typography, FormControl\r\n} from '@material-ui/core'\r\nimport { Formik, Form, ErrorMessage } from 'formik'\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport { Autocomplete } from '@material-ui/core';\r\n\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport { FormHelperText } from '@material-ui/core'\r\n\r\nimport AdapterDateFns from '@material-ui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@material-ui/lab/LocalizationProvider';\r\nimport DesktopDatePicker from '@material-ui/lab/DesktopDatePicker';\r\nimport Stack from '@material-ui/core/Stack';\r\nimport { format } from \"date-fns\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Swal from 'sweetalert2'\r\nimport MuiAlert from '@material-ui/core/Alert';\r\n\r\nimport { requesicoes } from \"../../../utils/services\";\r\nimport Input from '../../../ui-component/shared/Input';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        '&:hover': {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n\r\n}));\r\n\r\nconst Alert = React.forwardRef(function Alert(props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\n\r\n//let paises = [];\r\nlet sexos = [];\r\nlet documentos = [];\r\nlet provincias = [];\r\nlet nacionalidades = [];\r\nlet distritos = [];\r\nlet cidades = []\r\nlet cursos = [];\r\nlet provinciasde = [];\r\nlet estudante = {};\r\n\r\n\r\nconst NovoEstudante = () => {\r\n\r\n    const classes = useStyles();   \r\n    const [initialValues, setInitialValues] = useState({});\r\n    const [updateDOM, setUpdateDOM] = useState(false);\r\n    const [provincia, setProvincia] = useState('');\r\n    const [selectedDateNasc, setSelectedDateNasc] = useState(new Date());\r\n    const [selectedDateEmissao, setSelectedDateEmissao] = useState(new Date());\r\n    const [isLoadingData, setIsLoadingData] = useState(true);\r\n    const [redirect, setRedirect] = useState(false);\r\n    const [to, setTo] = useState('');\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClick = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        setOpen(false);\r\n    };\r\n\r\n    const action = (\r\n        <React.Fragment>\r\n            <Button color=\"secondary\" size=\"small\" onClick={handleClose}>\r\n                UNDO\r\n            </Button>\r\n            <IconButton\r\n                size=\"small\"\r\n                aria-label=\"close\"\r\n                color=\"inherit\"\r\n                onClick={handleClose}\r\n            >\r\n                <CloseIcon fontSize=\"small\" />\r\n            </IconButton>\r\n        </React.Fragment>\r\n    );\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        init();\r\n    }, [])\r\n\r\n\r\n\r\n    const handleDateChange = (date) => {\r\n        //setSelectedDate(date);\r\n        setSelectedDateNasc(date);\r\n        setSelectedDateEmissao(date)\r\n    };\r\n\r\n    const paperStyle = { padding: '50px 25px', width: 750, margin: ' auto' }\r\n\r\n\r\n    async function init() {\r\n        let id = window.location.href.split('/');\r\n       \r\n        id = (id[id.length - 1]);\r\n        console.log(id)\r\n        const [requestEstudante, requestSexo, tiposDocumentos, listaCurso, listaPaises, listaprovincias, listaCidades]\r\n            = await Promise.all([requesicoes().getestudanteById(`/${id}`), requesicoes().buscarSexo(),\r\n            requesicoes().buscarDocumentoEst(), requesicoes().buscarCurso('?campos=id,nome'), requesicoes().buscarPaises(), requesicoes().buscarProvincia('?campos=id,name,country_id.id'),\r\n            requesicoes().buscarCidades('?campos=id,name,regiaoPai.id,regiaoPai.name')])\r\n\r\n        // nacionalidade = listaPaises.data\r\n        sexos = requestSexo.data\r\n        documentos = tiposDocumentos.data\r\n        provincias = listaprovincias.data\r\n        distritos = listaCidades.data\r\n        nacionalidades = listaPaises.data\r\n        cursos = listaCurso.data\r\n        estudante = requestEstudante.data\r\n       \r\n        setInitialValues({ ...estudante });\r\n       \r\n        setIsLoadingData(false);\r\n        setUpdateDOM(!updateDOM)\r\n\r\n    }\r\n    \r\n    async function buscarProvincias(v) {\r\n        provinciasde = provincias.filter(p => p.country_id.id == v.id)\r\n        setProvincia(provinciasde)\r\n\r\n    }\r\n\r\n    async function buscarCidades(v) {\r\n        cidades = distritos.filter(d => d.regiaoPai.id == v.id)\r\n        //setProvincia(cidades)\r\n    }\r\n\r\n    /*async function buscarCurrrriculos(v) {\r\n\r\n        const listaCurriculos = await requesicoes().buscarCurriculos(v.id);\r\n        curriculos = listaCurriculos.data\r\n\r\n    }*/\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        apelido: Yup.string().min(3, \"Deve ter no minio 3 caratere\").required(\"Obrigatorio\"),\r\n        nome: Yup.string().min(3, \"Deve ter no minio 3 caratere\").required(\"Campo Obrigatorio\"),\r\n        sexo: Yup.string().oneOf([\"Masculino\", \"Femenino\"], \"Required\").required(\"Campo Obrigatorio\"),\r\n        pai: Yup.string().min(3, \"Deve ter no minio 3 carateres\").required('Campo Obrigatorio'),\r\n        mae: Yup.string().min(3, \"Deve ter no minio 3 carateres\").required(\"Campo Obrigatorio\")\r\n    })\r\n\r\n\r\n\r\n\r\n    return (<Container className=\"AppNovoEstudante\">\r\n\r\n\r\n\r\n        <Paper elevation={5} style={paperStyle}>\r\n            {!isLoadingData ?\r\n                <div>\r\n                    <Grid align='left'>\r\n                        <Typography variant='h4'>Alterar dados do Estudante</Typography>\r\n                        <Typography variant='caption'>Prencha os dados para alterar dados do estudante</Typography>\r\n                    </Grid>\r\n                    <br></br>\r\n\r\n                    <Formik initialValues={initialValues} validationSchema={validationSchema}\r\n\r\n                        onSubmit={(values, { setSubmitting }) => {\r\n                            async function save(values) {\r\n\r\n                                 console.log(JSON.stringify(values.id),'Dados')  \r\n\r\n                                try {\r\n\r\n                                    await Promise.resolve(requesicoes().putEstudantes(values));\r\n                                    //setOpen(true)\r\n                                    Swal.fire(\r\n                                        'Exito!',\r\n                                        'Dados do Estudante atualizado com sucesso!',\r\n                                        'success'\r\n                                    )\r\n                                    setTo('/student/list');\r\n                                    setRedirect(true);\r\n\r\n\r\n                                } catch (e) {\r\n\r\n                                    if (e.response.status == 400) {\r\n                                        Swal.fire({\r\n                                            icon: 'error',\r\n                                            title: 'Oops...',\r\n                                            text: e.response.data.map((m, i) => m.mensagemUsuario),\r\n\r\n                                        })\r\n\r\n                                    } else {\r\n\r\n                                        Swal.fire({\r\n                                            icon: 'error',\r\n                                            title: 'Oops...',\r\n                                            text: e.response.data.message,\r\n                                        })\r\n\r\n                                    }\r\n\r\n                                }\r\n                            }\r\n                            save(values);\r\n                            setTimeout(() => {\r\n                                setSubmitting(false);\r\n                            }, 500);\r\n                        }}>\r\n                        {(props) => {\r\n                            const { values, touched, errors, dirty, isSubmitting,\r\n                                handleChange, handleBlur, handleSubmit, handleReset, setFieldValue} = props;\r\n                            return (\r\n                                <Form>\r\n\r\n                                    <Grid container spacing={2} >\r\n                                        <Grid item xs={12} sm={6} className=\"AppInput\">\r\n                                        {/* <TextField\r\n                                                type=\"text\" variant=\"outlined\" name=\"apelido\"\r\n                                                error={(errors.apelido && touched.apelido)}\r\n                                                helperText={errors.apelido}\r\n                                                onChange={handleChange}\r\n                                                onBlur={handleBlur}\r\n                                                value={values.apelido} margin=\"dense\"\r\n                                                id=\"apelido\" fullWidth label=\"Apelido\" /> */}\r\n                                             <Input name=\"apelido\" label=\"Apelido\"\r\n                                                placeholder=\"Digite último nome\"\r\n                                                helperText={<ErrorMessage name='apelido' required fullWidth />}\r\n                                                error={props.errors.apelido && props.touched.apelido} /> \r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6} className=\"AppInput\">\r\n                                            <Input name=\"nome\"\r\n                                                label=\"Nome completo (Sem incluir o apelido)\"\r\n                                                placeholder=\"Digite nome completo\"\r\n                                                helperText={<ErrorMessage name='nome' />}\r\n                                                error={props.errors.nome && props.touched.nome} />\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6} className=\"AppInput\">\r\n                                            <Input name=\"pai\" label=\"Pai(Filiação)\"\r\n                                                placeholder=\"Digite nome do pai\"\r\n                                                helperText={<ErrorMessage name='[pai]' />}\r\n                                                error={props.errors.pai && props.touched.pai} /></Grid>\r\n\r\n                                        <Grid item xs={12} sm={6} className=\"AppInput\">\r\n                                            <Input name=\"mae\" label=\"Mãe (Filiação)\"\r\n                                                placeholder=\"Digite nome da mãe\"\r\n                                                helperText={<ErrorMessage name='mae' />}\r\n                                                error={props.errors.mae && props.touched.mae} />\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6} className=\"AppInput\">\r\n\r\n                                            <FormControl component=\"fieldset\" >\r\n                                                <Typography variant=\"body1\" gutterBottom>Sexo</Typography>\r\n                                                <RadioGroup row aria-label=\"sexo\" name=\"sexo\" value={values.sexo}\r\n                                                    onChange={(e) => { setFieldValue('sexo', e.target.value); }}>\r\n                                                    {sexos.map(opt =>\r\n                                                        <FormControlLabel key={opt} value={opt} control={<Radio />} label={opt} />)}\r\n                                                </RadioGroup>\r\n                                                <FormHelperText></FormHelperText>\r\n                                            </FormControl>\r\n\r\n                                        </Grid>\r\n\r\n                                        <Grid item xs={12} sm={6} className=\"AppInput\">\r\n\r\n\r\n                                            <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                                <Stack spacing={3}>\r\n\r\n                                                    <DesktopDatePicker\r\n                                                        label=\"Data de Nascimento\"\r\n                                                        name=\"dataNascimento\"\r\n                                                        format=\"dd/MM/yyyy\"\r\n                                                        value={values.dataNascimento}\r\n                                                        \r\n                                                        // minDate={new Date('2017-01-01')}\r\n                                                        onChange={(v) => {\r\n                                                            setSelectedDateNasc(v);\r\n                                                            setFieldValue('dataNascimento', format(v, 'yyyy-MM-dd'))\r\n                                                        }}\r\n                                                        KeyboardButtonProps={{\r\n                                                            'aria-label': 'change date',\r\n                                                        }}\r\n\r\n                                                        renderInput={(params) => <TextField {...params} />}\r\n                                                    />\r\n\r\n                                                </Stack>\r\n                                            </LocalizationProvider>\r\n                                        </Grid>\r\n\r\n                                        <Grid item xs={12} sm={6} className=\"AppInput\">\r\n                                            <Autocomplete name=\"nacionalidade\"\r\n                                                onChange={(e, v) => {\r\n                                                    setFieldValue('nacionalidade', v);\r\n                                                    buscarProvincias(v)\r\n                                                }} value={values.nacionalidade}\r\n                                                fullWidth id=\"nacionalidade\"\r\n                                                getOptionLabel={option => option.name}\r\n                                                options={nacionalidades} style={{ minWidth: 200 }}\r\n                                                renderInput={(params) => <TextField variant=\"outlined\" margin=\"dense\" label=\"Nacionalidade\"\r\n                                                    fullWidth {...params} placeholder=\"Seleccione uma opção\" />}\r\n                                            />\r\n\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6} className=\"AppInput\">\r\n\r\n                                            <Autocomplete name=\"naturalidade\"\r\n                                                onChange={(e, v) => {\r\n                                                    setFieldValue('naturalidade', v);\r\n                                                    buscarCidades(v)\r\n                                                }} value={values.naturalidade}\r\n                                                id=\"controllable-states-demo\"\r\n                                                getOptionLabel={option => option.name}\r\n                                                options={provinciasde}\r\n                                                // style={{ width: 328 }}\r\n                                                renderInput={(params) => <TextField {...params}\r\n                                                    InputLabelProps={{\r\n                                                        shrink: true,\r\n                                                    }} placeholder=\"--Selecione--\"\r\n                                                    label=\"Província\" variant=\"outlined\" />}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6} className=\"AppInput\">\r\n                                            <Autocomplete name=\"cidade\"\r\n                                                onChange={(e, v) => { setFieldValue('cidade', v); }}\r\n                                                id=\"controllable-states-demo\" value={values.cidade}\r\n                                                getOptionLabel={option => option.name}\r\n                                                options={cidades}\r\n                                                // style={{ width: 328 }}\r\n                                                renderInput={(params) => <TextField {...params}\r\n                                                    InputLabelProps={{\r\n                                                        shrink: true,\r\n                                                    }} placeholder=\"--Selecione--\"\r\n                                                    label=\"Cidade\" variant=\"outlined\" />}\r\n                                            />\r\n                                        </Grid>\r\n\r\n                                        <Grid item xs={12} sm={6} >\r\n                                            <FormControl component=\"fieldset\" >\r\n                                                <Typography variant=\"body1\" gutterBottom>Tipo de Documento</Typography>\r\n\r\n                                                <RadioGroup row aria-label=\"tipoDocumento\" name=\"tipoDocumento\" value={values.tipoDocumento}\r\n                                                    onChange={(e) => { setFieldValue('tipoDocumento', e.target.value); }}>\r\n                                                    {documentos.map(opt =>\r\n                                                        <FormControlLabel key={opt} value={opt.values} control={<Radio />} label={opt.label} />)}\r\n                                                </RadioGroup>\r\n                                                <FormHelperText></FormHelperText>\r\n                                            </FormControl>\r\n\r\n\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6} className=\"AppInput\">\r\n                                            <Input name=\"numeroDocumento\" label=\"Nº de identificação\"\r\n                                                placeholder=\"Digite o número \"\r\n                                                helperText={<ErrorMessage name='apelido' />}\r\n                                                error={props.errors.apelido && props.touched.apelido} />\r\n                                        </Grid>\r\n\r\n                                        <Grid item xs={12} sm={6} className=\"AppInput\">\r\n                                            <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                                <Stack spacing={3}>\r\n\r\n                                                    <DesktopDatePicker\r\n                                                        label=\"Data de Emissao\"\r\n                                                        name=\"dataEmissao\"\r\n                                                        format=\"dd/MM/yyyy\"\r\n                                                        // value={selectedDateEmissao}\r\n                                                        value={values.dataEmissao}\r\n                                                        // minDate={new Date('2017-01-01')}\r\n                                                        onChange={(v) => {\r\n                                                            setSelectedDateEmissao(v);\r\n                                                            setFieldValue('dataEmissao', format(v, 'yyyy-MM-dd'))\r\n                                                        }}\r\n                                                        KeyboardButtonProps={{\r\n                                                            'aria-label': 'change date',\r\n                                                        }}\r\n\r\n                                                        renderInput={(params) => <TextField {...params} />}\r\n                                                    />\r\n\r\n                                                </Stack>\r\n                                            </LocalizationProvider>\r\n\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6} className=\"AppInput\">\r\n                                            <Input name=\"telemovel\" label=\"Telemóvel\"\r\n                                                placeholder=\"Digite o número \"\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6} className=\"AppInput\">\r\n                                            <Input name=\"email\" label=\"E-mail\"\r\n                                                placeholder=\"Digite o e-mail \"\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6} className=\"AppInput\">\r\n                                            <Autocomplete\r\n                                                name=\"curso\"\r\n                                                onChange={(e, v) => {\r\n                                                    setFieldValue('curso', v);\r\n                                                    // buscarCurrrriculos(v)\r\n                                                }}  value={values.curso}\r\n                                                id=\"controllable-states-demo\"\r\n                                                getOptionLabel={option => option.nome}\r\n                                                options={cursos}\r\n                                                // style={{ width: 328 }}\r\n                                                renderInput={(params) => <TextField {...params}\r\n                                                    InputLabelProps={{\r\n                                                        shrink: true,\r\n                                                    }} placeholder=\"--Selecione--\"\r\n                                                    label=\"Curso\" variant=\"outlined\" />}\r\n                                            />\r\n                                        </Grid>\r\n                                        {/* <Grid item xs={12} sm={6} className=\"AppInput\">\r\n                                    <Autocomplete\r\n                                        name=\"curiculo\"\r\n                                        onChange={(e, v) => {\r\n                                            setFieldValue('curiculo', v);\r\n                                            \r\n                                        }}\r\n                                        id=\"controllable-states-demo\"\r\n                                        getOptionLabel={option => option.nome}\r\n                                        options={curriculos}\r\n                                        // style={{ width: 328 }}\r\n                                        renderInput={(params) => <TextField {...params}\r\n                                            InputLabelProps={{\r\n                                                shrink: true,\r\n                                            }} placeholder=\"--Selecione--\"\r\n                                            label=\"Curriculo\" variant=\"outlined\" />}\r\n                                    />\r\n\r\n                                </Grid> */}\r\n\r\n                                        <Grid item xs={12} sm={12}>\r\n                                            <Button variant=\"contained\" color=\"primary\" type='submit' size=\"large\"\r\n                                                className={classes.button} startIcon={<SaveIcon />}>\r\n                                                Actualizar\r\n                                            </Button>\r\n                                        </Grid>\r\n\r\n\r\n\r\n                                    </Grid>\r\n\r\n\r\n                                </Form>)\r\n                        }}\r\n                    </Formik>\r\n                </div> : <div>Processando!</div>}\r\n        </Paper>\r\n\r\n    </Container >\r\n    );\r\n\r\n}\r\nexport default NovoEstudante\r\n","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Field, } from 'formik'\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  inputLabel: {\r\n    fontSize: '1.2rem', // Ajuste o tamanho da fonte conforme necessário\r\n  },\r\n});\r\n\r\nconst Input = (props) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n\r\n   \r\n      <Field as={TextField} name={props.name} id=\"outlined-full-width\"\r\n        label={props.label} size=\"small\"  type={props.type}\r\n        placeholder={props.placeholder} fullWidth margin=\"normal\" InputLabelProps={{\r\n          shrink: true,className: classes.inputLabel,\r\n        }} variant=\"outlined\" helperText={props.helperText} error={props.error}\r\n\r\n      />\r\n  );\r\n\r\n}\r\nexport default Input","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z\"\n}), 'Save');\n\nexports.default = _default;"],"sourceRoot":""}